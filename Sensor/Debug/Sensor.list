
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080041cc  080041cc  000051cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800443c  0800443c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800443c  0800443c  0000543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004444  08004444  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004444  08004444  00005444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004448  08004448  00005448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800444c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  2000005c  080044a8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080044a8  000063dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d86f  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c9  00000000  00000000  000138f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00015cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c1  00000000  00000000  00016968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aee  00000000  00000000  00017329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105ce  00000000  00000000  0002fe17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d5e  00000000  00000000  000403e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c0  00000000  00000000  000ca188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000cda48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080041b4 	.word	0x080041b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080041b4 	.word	0x080041b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <TOF_InitStruct>:
const size_t registered_sensors_cnt = _VL53L1X_MAX_SENSORS;
static int (*vl53l1x_log_func)(const char*, ...) = NULL;

// Function definitions
int TOF_InitStruct(VL53L1X* sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	603b      	str	r3, [r7, #0]
 8000168:	4613      	mov	r3, r2
 800016a:	71fb      	strb	r3, [r7, #7]
	if (address == 0x29)
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	2b29      	cmp	r3, #41	@ 0x29
 8000170:	d107      	bne.n	8000182 <TOF_InitStruct+0x26>
		_VL53L1X_LOG("Trying to set 0x29 as the address for the ToF, this can cause issues\r\n");
 8000172:	4b1f      	ldr	r3, [pc, #124]	@ (80001f0 <TOF_InitStruct+0x94>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d003      	beq.n	8000182 <TOF_InitStruct+0x26>
 800017a:	4b1d      	ldr	r3, [pc, #116]	@ (80001f0 <TOF_InitStruct+0x94>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	481d      	ldr	r0, [pc, #116]	@ (80001f4 <TOF_InitStruct+0x98>)
 8000180:	4798      	blx	r3

	sensor->hi2c = hi2c;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	68ba      	ldr	r2, [r7, #8]
 8000186:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	79fa      	ldrb	r2, [r7, #7]
 800018c:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	683a      	ldr	r2, [r7, #0]
 8000192:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	8c3a      	ldrh	r2, [r7, #32]
 8000198:	819a      	strh	r2, [r3, #12]

	// Find free slot
	uint8_t id;
	for (id = 0; (id < _VL53L1X_MAX_SENSORS) && registered_sensors[id] != NULL; id++);
 800019a:	2300      	movs	r3, #0
 800019c:	75fb      	strb	r3, [r7, #23]
 800019e:	e002      	b.n	80001a6 <TOF_InitStruct+0x4a>
 80001a0:	7dfb      	ldrb	r3, [r7, #23]
 80001a2:	3301      	adds	r3, #1
 80001a4:	75fb      	strb	r3, [r7, #23]
 80001a6:	7dfb      	ldrb	r3, [r7, #23]
 80001a8:	2b09      	cmp	r3, #9
 80001aa:	d805      	bhi.n	80001b8 <TOF_InitStruct+0x5c>
 80001ac:	7dfb      	ldrb	r3, [r7, #23]
 80001ae:	4a12      	ldr	r2, [pc, #72]	@ (80001f8 <TOF_InitStruct+0x9c>)
 80001b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d1f3      	bne.n	80001a0 <TOF_InitStruct+0x44>

	if (id >= _VL53L1X_MAX_SENSORS)
 80001b8:	7dfb      	ldrb	r3, [r7, #23]
 80001ba:	2b09      	cmp	r3, #9
 80001bc:	d90b      	bls.n	80001d6 <TOF_InitStruct+0x7a>
	{
		_VL53L1X_LOG("Added too many sensors, increase _VL53L1X_MAX_SENSORS value, currently %d\r\n", registered_sensors_cnt);
 80001be:	4b0c      	ldr	r3, [pc, #48]	@ (80001f0 <TOF_InitStruct+0x94>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d005      	beq.n	80001d2 <TOF_InitStruct+0x76>
 80001c6:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <TOF_InitStruct+0x94>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	220a      	movs	r2, #10
 80001cc:	4611      	mov	r1, r2
 80001ce:	480b      	ldr	r0, [pc, #44]	@ (80001fc <TOF_InitStruct+0xa0>)
 80001d0:	4798      	blx	r3
		return 1;
 80001d2:	2301      	movs	r3, #1
 80001d4:	e008      	b.n	80001e8 <TOF_InitStruct+0x8c>
	}

	sensor->id = id;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	7dfa      	ldrb	r2, [r7, #23]
 80001da:	739a      	strb	r2, [r3, #14]
	registered_sensors[id] = sensor;
 80001dc:	7dfb      	ldrb	r3, [r7, #23]
 80001de:	4906      	ldr	r1, [pc, #24]	@ (80001f8 <TOF_InitStruct+0x9c>)
 80001e0:	68fa      	ldr	r2, [r7, #12]
 80001e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return 0;
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3718      	adds	r7, #24
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	080041cc 	.word	0x080041cc
 80001f8:	20000078 	.word	0x20000078
 80001fc:	08004220 	.word	0x08004220

08000200 <TOF_TurnOn>:

void TOF_TurnOn(const VL53L1X* sensor)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	6898      	ldr	r0, [r3, #8]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	899b      	ldrh	r3, [r3, #12]
 8000210:	2201      	movs	r2, #1
 8000212:	4619      	mov	r1, r3
 8000214:	f001 fc9e 	bl	8001b54 <HAL_GPIO_WritePin>
}
 8000218:	bf00      	nop
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <TOF_TurnOff>:

void TOF_TurnOff(const VL53L1X* sensor)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	6898      	ldr	r0, [r3, #8]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	899b      	ldrh	r3, [r3, #12]
 8000230:	2200      	movs	r2, #0
 8000232:	4619      	mov	r1, r3
 8000234:	f001 fc8e 	bl	8001b54 <HAL_GPIO_WritePin>
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <TOF_BootMultipleSensors>:

int TOF_BootMultipleSensors(VL53L1X** sensors, uint8_t count)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
	int status = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]

	for (uint8_t n = 0; n < count; n++) {
 8000250:	2300      	movs	r3, #0
 8000252:	72fb      	strb	r3, [r7, #11]
 8000254:	e00a      	b.n	800026c <TOF_BootMultipleSensors+0x2c>
		TOF_TurnOff(sensors[n]);
 8000256:	7afb      	ldrb	r3, [r7, #11]
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	4413      	add	r3, r2
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ffdd 	bl	8000220 <TOF_TurnOff>
	for (uint8_t n = 0; n < count; n++) {
 8000266:	7afb      	ldrb	r3, [r7, #11]
 8000268:	3301      	adds	r3, #1
 800026a:	72fb      	strb	r3, [r7, #11]
 800026c:	7afa      	ldrb	r2, [r7, #11]
 800026e:	78fb      	ldrb	r3, [r7, #3]
 8000270:	429a      	cmp	r2, r3
 8000272:	d3f0      	bcc.n	8000256 <TOF_BootMultipleSensors+0x16>
	}

	for (uint8_t n = 0; n < count; n++) {
 8000274:	2300      	movs	r3, #0
 8000276:	72bb      	strb	r3, [r7, #10]
 8000278:	e00e      	b.n	8000298 <TOF_BootMultipleSensors+0x58>
		status |= TOF_BootSensor(sensors[n]);
 800027a:	7abb      	ldrb	r3, [r7, #10]
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f811 	bl	80002ac <TOF_BootSensor>
 800028a:	4602      	mov	r2, r0
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4313      	orrs	r3, r2
 8000290:	60fb      	str	r3, [r7, #12]
	for (uint8_t n = 0; n < count; n++) {
 8000292:	7abb      	ldrb	r3, [r7, #10]
 8000294:	3301      	adds	r3, #1
 8000296:	72bb      	strb	r3, [r7, #10]
 8000298:	7aba      	ldrb	r2, [r7, #10]
 800029a:	78fb      	ldrb	r3, [r7, #3]
 800029c:	429a      	cmp	r2, r3
 800029e:	d3ec      	bcc.n	800027a <TOF_BootMultipleSensors+0x3a>
	}

	return status;
 80002a0:	68fb      	ldr	r3, [r7, #12]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <TOF_BootSensor>:

int TOF_BootSensor(VL53L1X* sensor)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	int status = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
	TOF_TurnOn(sensor);
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f7ff ffa1 	bl	8000200 <TOF_TurnOn>
    HAL_Delay(2); // Sometimes this is too fast and line can't settle
 80002be:	2002      	movs	r0, #2
 80002c0:	f000 ffae 	bl	8001220 <HAL_Delay>

    // Check if sensor is already configured with the correct address
    uint16_t id = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	813b      	strh	r3, [r7, #8]
    if (VL53L1X_GetSensorId(sensor->id, &id) != 0)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b9b      	ldrb	r3, [r3, #14]
 80002cc:	461a      	mov	r2, r3
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	4619      	mov	r1, r3
 80002d4:	4610      	mov	r0, r2
 80002d6:	f000 f9d2 	bl	800067e <VL53L1X_GetSensorId>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d029      	beq.n	8000334 <TOF_BootSensor+0x88>
    {
    	uint8_t real_address = sensor->address;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	791b      	ldrb	r3, [r3, #4]
 80002e4:	72fb      	strb	r3, [r7, #11]
    	sensor->address = 0x29;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2229      	movs	r2, #41	@ 0x29
 80002ea:	711a      	strb	r2, [r3, #4]

    	status = VL53L1X_SetI2CAddress(sensor->id, real_address);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7b9b      	ldrb	r3, [r3, #14]
 80002f0:	461a      	mov	r2, r3
 80002f2:	7afb      	ldrb	r3, [r7, #11]
 80002f4:	4619      	mov	r1, r3
 80002f6:	4610      	mov	r0, r2
 80002f8:	f000 f890 	bl	800041c <VL53L1X_SetI2CAddress>
 80002fc:	4603      	mov	r3, r0
 80002fe:	60fb      	str	r3, [r7, #12]

    	sensor->address = real_address;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	7afa      	ldrb	r2, [r7, #11]
 8000304:	711a      	strb	r2, [r3, #4]

    	if (status != 0)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d013      	beq.n	8000334 <TOF_BootSensor+0x88>
    	{
    		if (sensor->address == 0x20) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	791b      	ldrb	r3, [r3, #4]
 8000310:	2b20      	cmp	r3, #32
 8000312:	d103      	bne.n	800031c <TOF_BootSensor+0x70>
    			status = 1;
 8000314:	2301      	movs	r3, #1
 8000316:	60fb      	str	r3, [r7, #12]
    			return status;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	e049      	b.n	80003b0 <TOF_BootSensor+0x104>
    		}
    		else if (sensor->address == 0x26) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	791b      	ldrb	r3, [r3, #4]
 8000320:	2b26      	cmp	r3, #38	@ 0x26
 8000322:	d103      	bne.n	800032c <TOF_BootSensor+0x80>
    			status = 2;
 8000324:	2302      	movs	r3, #2
 8000326:	60fb      	str	r3, [r7, #12]
    			return status;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	e041      	b.n	80003b0 <TOF_BootSensor+0x104>
    		}
    		else {
    			status = 9;
 800032c:	2309      	movs	r3, #9
 800032e:	60fb      	str	r3, [r7, #12]
    			return status;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	e03d      	b.n	80003b0 <TOF_BootSensor+0x104>
    		return status;
    	}
    }

	// Initialise sensor
    status = VL53L1X_SensorInit(sensor->id);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	7b9b      	ldrb	r3, [r3, #14]
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f88b 	bl	8000454 <VL53L1X_SensorInit>
 800033e:	4603      	mov	r3, r0
 8000340:	60fb      	str	r3, [r7, #12]
	if (status)
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d00e      	beq.n	8000366 <TOF_BootSensor+0xba>
	{
		status = 3;
 8000348:	2303      	movs	r3, #3
 800034a:	60fb      	str	r3, [r7, #12]
		_VL53L1X_LOG("Unable to initialise sensor 0x%02X\r\n", sensor->address);
 800034c:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <TOF_BootSensor+0x10c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d006      	beq.n	8000362 <TOF_BootSensor+0xb6>
 8000354:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <TOF_BootSensor+0x10c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	7912      	ldrb	r2, [r2, #4]
 800035c:	4611      	mov	r1, r2
 800035e:	4817      	ldr	r0, [pc, #92]	@ (80003bc <TOF_BootSensor+0x110>)
 8000360:	4798      	blx	r3
		return status;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	e024      	b.n	80003b0 <TOF_BootSensor+0x104>
	}
	status = VL53L1X_StartRanging(sensor->id);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	7b9b      	ldrb	r3, [r3, #14]
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f920 	bl	80005b0 <VL53L1X_StartRanging>
 8000370:	4603      	mov	r3, r0
 8000372:	60fb      	str	r3, [r7, #12]
	if (status)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d00e      	beq.n	8000398 <TOF_BootSensor+0xec>
	{
		status = 4;
 800037a:	2304      	movs	r3, #4
 800037c:	60fb      	str	r3, [r7, #12]
		_VL53L1X_LOG("Unable to start measurements on sensor 0x%02X\r\n", sensor->address);
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <TOF_BootSensor+0x10c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <TOF_BootSensor+0xe8>
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <TOF_BootSensor+0x10c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	7912      	ldrb	r2, [r2, #4]
 800038e:	4611      	mov	r1, r2
 8000390:	480b      	ldr	r0, [pc, #44]	@ (80003c0 <TOF_BootSensor+0x114>)
 8000392:	4798      	blx	r3
		return status;
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	e00b      	b.n	80003b0 <TOF_BootSensor+0x104>
	}

	_VL53L1X_LOG("Sensor 0x%02X configured successfully\r\n", sensor->address);
 8000398:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <TOF_BootSensor+0x10c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d006      	beq.n	80003ae <TOF_BootSensor+0x102>
 80003a0:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <TOF_BootSensor+0x10c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	7912      	ldrb	r2, [r2, #4]
 80003a8:	4611      	mov	r1, r2
 80003aa:	4806      	ldr	r0, [pc, #24]	@ (80003c4 <TOF_BootSensor+0x118>)
 80003ac:	4798      	blx	r3
	return 0;
 80003ae:	2300      	movs	r3, #0
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200000a0 	.word	0x200000a0
 80003bc:	08004278 	.word	0x08004278
 80003c0:	080042a8 	.word	0x080042a8
 80003c4:	080042e4 	.word	0x080042e4

080003c8 <TOF_GetDistance>:

uint16_t TOF_GetDistance(const VL53L1X* sensor)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	uint16_t reading = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	81fb      	strh	r3, [r7, #14]
	if(VL53L1X_GetDistance(sensor->id, &reading) != 0)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	7b9b      	ldrb	r3, [r3, #14]
 80003d8:	461a      	mov	r2, r3
 80003da:	f107 030e 	add.w	r3, r7, #14
 80003de:	4619      	mov	r1, r3
 80003e0:	4610      	mov	r0, r2
 80003e2:	f000 f96c 	bl	80006be <VL53L1X_GetDistance>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d00d      	beq.n	8000408 <TOF_GetDistance+0x40>
	{
		_VL53L1X_LOG("Failed to read distance from sensor 0x%02X\r\n", sensor->address);
 80003ec:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <TOF_GetDistance+0x4c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d006      	beq.n	8000402 <TOF_GetDistance+0x3a>
 80003f4:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <TOF_GetDistance+0x4c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	7912      	ldrb	r2, [r2, #4]
 80003fc:	4611      	mov	r1, r2
 80003fe:	4806      	ldr	r0, [pc, #24]	@ (8000418 <TOF_GetDistance+0x50>)
 8000400:	4798      	blx	r3
		return 0xFFFF; // VL53L1X_GetDistance() returns the reading for previous sensor if reading failed
 8000402:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000406:	e000      	b.n	800040a <TOF_GetDistance+0x42>
	}
	return reading;
 8000408:	89fb      	ldrh	r3, [r7, #14]
}
 800040a:	4618      	mov	r0, r3
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200000a0 	.word	0x200000a0
 8000418:	08004318 	.word	0x08004318

0800041c <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	460a      	mov	r2, r1
 8000426:	80fb      	strh	r3, [r7, #6]
 8000428:	4613      	mov	r3, r2
 800042a:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 8000430:	797a      	ldrb	r2, [r7, #5]
 8000432:	88fb      	ldrh	r3, [r7, #6]
 8000434:	2101      	movs	r1, #1
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fdc6 	bl	8000fc8 <VL53L1_WrByte>
 800043c:	4603      	mov	r3, r0
 800043e:	461a      	mov	r2, r3
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	4313      	orrs	r3, r2
 8000444:	73fb      	strb	r3, [r7, #15]
	return status;
 8000446:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800044a:	4618      	mov	r0, r3
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8000462:	2300      	movs	r3, #0
 8000464:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000466:	232d      	movs	r3, #45	@ 0x2d
 8000468:	73bb      	strb	r3, [r7, #14]
 800046a:	e011      	b.n	8000490 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800046c:	7bbb      	ldrb	r3, [r7, #14]
 800046e:	b299      	uxth	r1, r3
 8000470:	7bbb      	ldrb	r3, [r7, #14]
 8000472:	3b2d      	subs	r3, #45	@ 0x2d
 8000474:	4a2c      	ldr	r2, [pc, #176]	@ (8000528 <VL53L1X_SensorInit+0xd4>)
 8000476:	5cd2      	ldrb	r2, [r2, r3]
 8000478:	88fb      	ldrh	r3, [r7, #6]
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fda4 	bl	8000fc8 <VL53L1_WrByte>
 8000480:	4603      	mov	r3, r0
 8000482:	461a      	mov	r2, r3
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	4313      	orrs	r3, r2
 8000488:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800048a:	7bbb      	ldrb	r3, [r7, #14]
 800048c:	3301      	adds	r3, #1
 800048e:	73bb      	strb	r3, [r7, #14]
 8000490:	7bbb      	ldrb	r3, [r7, #14]
 8000492:	2b87      	cmp	r3, #135	@ 0x87
 8000494:	d9ea      	bls.n	800046c <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f889 	bl	80005b0 <VL53L1X_StartRanging>
 800049e:	4603      	mov	r3, r0
 80004a0:	461a      	mov	r2, r3
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 80004ac:	e00b      	b.n	80004c6 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80004ae:	f107 020d 	add.w	r2, r7, #13
 80004b2:	88fb      	ldrh	r3, [r7, #6]
 80004b4:	4611      	mov	r1, r2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f8aa 	bl	8000610 <VL53L1X_CheckForDataReady>
 80004bc:	4603      	mov	r3, r0
 80004be:	461a      	mov	r2, r3
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 80004c6:	7b7b      	ldrb	r3, [r7, #13]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d0f0      	beq.n	80004ae <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f82c 	bl	800052c <VL53L1X_ClearInterrupt>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	4313      	orrs	r3, r2
 80004dc:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f87d 	bl	80005e0 <VL53L1X_StopRanging>
 80004e6:	4603      	mov	r3, r0
 80004e8:	461a      	mov	r2, r3
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80004f0:	88fb      	ldrh	r3, [r7, #6]
 80004f2:	2209      	movs	r2, #9
 80004f4:	2108      	movs	r1, #8
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fd66 	bl	8000fc8 <VL53L1_WrByte>
 80004fc:	4603      	mov	r3, r0
 80004fe:	461a      	mov	r2, r3
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	4313      	orrs	r3, r2
 8000504:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	2200      	movs	r2, #0
 800050a:	210b      	movs	r1, #11
 800050c:	4618      	mov	r0, r3
 800050e:	f000 fd5b 	bl	8000fc8 <VL53L1_WrByte>
 8000512:	4603      	mov	r3, r0
 8000514:	461a      	mov	r2, r3
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	4313      	orrs	r3, r2
 800051a:	73fb      	strb	r3, [r7, #15]
	return status;
 800051c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	08004380 	.word	0x08004380

0800052c <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	2201      	movs	r2, #1
 800053e:	2186      	movs	r1, #134	@ 0x86
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fd41 	bl	8000fc8 <VL53L1_WrByte>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	4313      	orrs	r3, r2
 800054e:	73fb      	strb	r3, [r7, #15]
	return status;
 8000550:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	6039      	str	r1, [r7, #0]
 8000566:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800056c:	f107 020e 	add.w	r2, r7, #14
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	2130      	movs	r1, #48	@ 0x30
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fd53 	bl	8001020 <VL53L1_RdByte>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	4313      	orrs	r3, r2
 8000582:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	f003 0310 	and.w	r3, r3, #16
 800058a:	b2db      	uxtb	r3, r3
 800058c:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	091b      	lsrs	r3, r3, #4
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	bf0c      	ite	eq
 8000598:	2301      	moveq	r3, #1
 800059a:	2300      	movne	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	701a      	strb	r2, [r3, #0]
	return status;
 80005a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	2240      	movs	r2, #64	@ 0x40
 80005c2:	2187      	movs	r1, #135	@ 0x87
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fcff 	bl	8000fc8 <VL53L1_WrByte>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	73fb      	strb	r3, [r7, #15]
	return status;
 80005d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	2200      	movs	r2, #0
 80005f2:	2187      	movs	r1, #135	@ 0x87
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fce7 	bl	8000fc8 <VL53L1_WrByte>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	4313      	orrs	r3, r2
 8000602:	73fb      	strb	r3, [r7, #15]
	return status;
 8000604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000620:	f107 020d 	add.w	r2, r7, #13
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff97 	bl	800055c <VL53L1X_GetInterruptPolarity>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	4313      	orrs	r3, r2
 8000636:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000638:	f107 020e 	add.w	r2, r7, #14
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	2131      	movs	r1, #49	@ 0x31
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fced 	bl	8001020 <VL53L1_RdByte>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	4313      	orrs	r3, r2
 800064e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10c      	bne.n	8000672 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	7b7a      	ldrb	r2, [r7, #13]
 8000660:	4293      	cmp	r3, r2
 8000662:	d103      	bne.n	800066c <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e002      	b.n	8000672 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000672:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b084      	sub	sp, #16
 8000682:	af00      	add	r7, sp, #0
 8000684:	4603      	mov	r3, r0
 8000686:	6039      	str	r1, [r7, #0]
 8000688:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	81bb      	strh	r3, [r7, #12]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 8000692:	f107 020c 	add.w	r2, r7, #12
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	f240 110f 	movw	r1, #271	@ 0x10f
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fcf7 	bl	8001090 <VL53L1_RdWord>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	73fb      	strb	r3, [r7, #15]
	*sensorId = tmp;
 80006ac:	89ba      	ldrh	r2, [r7, #12]
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	801a      	strh	r2, [r3, #0]
	return status;
 80006b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	6039      	str	r1, [r7, #0]
 80006c8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 80006ce:	f107 020c 	add.w	r2, r7, #12
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	2196      	movs	r1, #150	@ 0x96
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fcda 	bl	8001090 <VL53L1_RdWord>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 80006e6:	89ba      	ldrh	r2, [r7, #12]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	801a      	strh	r2, [r3, #0]
	return status;
 80006ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070c:	4b2e      	ldr	r3, [pc, #184]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a2d      	ldr	r2, [pc, #180]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b2b      	ldr	r3, [pc, #172]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000724:	4b28      	ldr	r3, [pc, #160]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a27      	ldr	r2, [pc, #156]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 800072a:	f043 0320 	orr.w	r3, r3, #32
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b25      	ldr	r3, [pc, #148]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0320 	and.w	r3, r3, #32
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a21      	ldr	r2, [pc, #132]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a1b      	ldr	r2, [pc, #108]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_GPIO_Init+0xd0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0308 	and.w	r3, r3, #8
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO10_Pin|XSHUT1_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000772:	4816      	ldr	r0, [pc, #88]	@ (80007cc <MX_GPIO_Init+0xd4>)
 8000774:	f001 f9ee 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, XSHUT2_Pin|GPIO11_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800077e:	4814      	ldr	r0, [pc, #80]	@ (80007d0 <MX_GPIO_Init+0xd8>)
 8000780:	f001 f9e8 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO10_Pin XSHUT1_Pin */
  GPIO_InitStruct.Pin = GPIO10_Pin|XSHUT1_Pin;
 8000784:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2302      	movs	r3, #2
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	4619      	mov	r1, r3
 800079c:	480b      	ldr	r0, [pc, #44]	@ (80007cc <MX_GPIO_Init+0xd4>)
 800079e:	f001 f855 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : XSHUT2_Pin GPIO11_Pin */
  GPIO_InitStruct.Pin = XSHUT2_Pin|GPIO11_Pin;
 80007a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_GPIO_Init+0xd8>)
 80007bc:	f001 f846 	bl	800184c <HAL_GPIO_Init>

}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40011000 	.word	0x40011000
 80007d0:	40010c00 	.word	0x40010c00

080007d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007da:	4a13      	ldr	r2, [pc, #76]	@ (8000828 <MX_I2C1_Init+0x54>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007e0:	4a12      	ldr	r2, [pc, #72]	@ (800082c <MX_I2C1_Init+0x58>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_I2C1_Init+0x50>)
 8000812:	f001 f9b7 	bl	8001b84 <HAL_I2C_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800081c:	f000 f9fe 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200000a4 	.word	0x200000a4
 8000828:	40005400 	.word	0x40005400
 800082c:	00061a80 	.word	0x00061a80

08000830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <HAL_I2C_MspInit+0x70>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d123      	bne.n	8000898 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000868:	23c0      	movs	r3, #192	@ 0xc0
 800086a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086c:	2312      	movs	r3, #18
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2302      	movs	r3, #2
 8000872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <HAL_I2C_MspInit+0x78>)
 800087c:	f000 ffe6 	bl	800184c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 8000886:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800088a:	61d3      	str	r3, [r2, #28]
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_I2C_MspInit+0x74>)
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40005400 	.word	0x40005400
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010c00 	.word	0x40010c00

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b0a9      	sub	sp, #164	@ 0xa4
 80008b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b2:	f000 fc53 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b6:	f000 f8bd 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ba:	f7ff ff1d 	bl	80006f8 <MX_GPIO_Init>
  MX_CAN_Init();
 80008be:	f000 f8ff 	bl	8000ac0 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80008c2:	f000 fa97 	bl	8000df4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008c6:	f7ff ff85 	bl	80007d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan); 	//Bat dau CAN
 80008ca:	484f      	ldr	r0, [pc, #316]	@ (8000a08 <main+0x15c>)
 80008cc:	f000 fdc7 	bl	800145e <HAL_CAN_Start>
	//Cau hinh Goi tin
	TxHeader.StdId = 0x012; // ID của thông điệp Node 1 sẽ gửi
 80008d0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a0c <main+0x160>)
 80008d2:	2212      	movs	r2, #18
 80008d4:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 5;  			// Số byte dữ liệu
 80008d6:	4b4d      	ldr	r3, [pc, #308]	@ (8000a0c <main+0x160>)
 80008d8:	2205      	movs	r2, #5
 80008da:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80008dc:	4b4b      	ldr	r3, [pc, #300]	@ (8000a0c <main+0x160>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80008e2:	4b4a      	ldr	r3, [pc, #296]	@ (8000a0c <main+0x160>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]

	VL53L1X sensor1, sensor2;
	TOF_InitStruct(&sensor1, &hi2c1, 0x20, XSHUT1_GPIO_Port,
 80008e8:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80008ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	4b47      	ldr	r3, [pc, #284]	@ (8000a10 <main+0x164>)
 80008f4:	2220      	movs	r2, #32
 80008f6:	4947      	ldr	r1, [pc, #284]	@ (8000a14 <main+0x168>)
 80008f8:	f7ff fc30 	bl	800015c <TOF_InitStruct>
	XSHUT1_Pin);
	TOF_InitStruct(&sensor2, &hi2c1, 0x26, XSHUT2_GPIO_Port,
 80008fc:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8000900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	4b44      	ldr	r3, [pc, #272]	@ (8000a18 <main+0x16c>)
 8000908:	2226      	movs	r2, #38	@ 0x26
 800090a:	4942      	ldr	r1, [pc, #264]	@ (8000a14 <main+0x168>)
 800090c:	f7ff fc26 	bl	800015c <TOF_InitStruct>
	XSHUT2_Pin);

	char msg[100];
	VL53L1X *sensors[] = {&sensor1, &sensor2};
 8000910:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800091a:	60bb      	str	r3, [r7, #8]
	int status = TOF_BootMultipleSensors(sensors, 2);
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2102      	movs	r1, #2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc8d 	bl	8000240 <TOF_BootMultipleSensors>
 8000926:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	if (status != 0) {
 800092a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800092e:	2b00      	cmp	r3, #0
 8000930:	d015      	beq.n	800095e <main+0xb2>
		sprintf(msg, "%d", (int) status);
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800093a:	4938      	ldr	r1, [pc, #224]	@ (8000a1c <main+0x170>)
 800093c:	4618      	mov	r0, r3
 800093e:	f002 ff89 	bl	8003854 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, 1, 100);
 8000942:	f107 010c 	add.w	r1, r7, #12
 8000946:	2364      	movs	r3, #100	@ 0x64
 8000948:	2201      	movs	r2, #1
 800094a:	4835      	ldr	r0, [pc, #212]	@ (8000a20 <main+0x174>)
 800094c:	f002 fdae 	bl	80034ac <HAL_UART_Transmit>
		while (1) { HAL_UART_Transmit(&huart1, (uint8_t*) "ERROR!!", 8, 100);
 8000950:	2364      	movs	r3, #100	@ 0x64
 8000952:	2208      	movs	r2, #8
 8000954:	4933      	ldr	r1, [pc, #204]	@ (8000a24 <main+0x178>)
 8000956:	4832      	ldr	r0, [pc, #200]	@ (8000a20 <main+0x174>)
 8000958:	f002 fda8 	bl	80034ac <HAL_UART_Transmit>
 800095c:	e7f8      	b.n	8000950 <main+0xa4>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint16_t Distance_Left = 0, Distance_Right = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8000964:	2300      	movs	r3, #0
 8000966:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//	Sending message
		Distance_Left = getDistance(&sensor1);
 800096a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f932 	bl	8000bd8 <getDistance>
 8000974:	4603      	mov	r3, r0
 8000976:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
		Distance_Right = getDistance(&sensor2);
 800097a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f92a 	bl	8000bd8 <getDistance>
 8000984:	4603      	mov	r3, r0
 8000986:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90

		encodeNumber(Distance_Left, 0);
 800098a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f905 	bl	8000ba0 <encodeNumber>
		encodeNumber(Distance_Right, 2);
 8000996:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800099a:	2102      	movs	r1, #2
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f8ff 	bl	8000ba0 <encodeNumber>
		//	store checksum
		TxData[4] = crc8(TxData, 4);
 80009a2:	2104      	movs	r1, #4
 80009a4:	4820      	ldr	r0, [pc, #128]	@ (8000a28 <main+0x17c>)
 80009a6:	f000 f8c1 	bl	8000b2c <crc8>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <main+0x17c>)
 80009b0:	711a      	strb	r2, [r3, #4]
		sprintf(msg, "\n\rLeft: %x%x mm\n\rRight: %x%x mm",
				TxData[1], TxData[0], TxData[3], TxData[2]);
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <main+0x17c>)
 80009b4:	785b      	ldrb	r3, [r3, #1]
		sprintf(msg, "\n\rLeft: %x%x mm\n\rRight: %x%x mm",
 80009b6:	4619      	mov	r1, r3
				TxData[1], TxData[0], TxData[3], TxData[2]);
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <main+0x17c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
		sprintf(msg, "\n\rLeft: %x%x mm\n\rRight: %x%x mm",
 80009bc:	461c      	mov	r4, r3
				TxData[1], TxData[0], TxData[3], TxData[2]);
 80009be:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <main+0x17c>)
 80009c0:	78db      	ldrb	r3, [r3, #3]
		sprintf(msg, "\n\rLeft: %x%x mm\n\rRight: %x%x mm",
 80009c2:	461a      	mov	r2, r3
				TxData[1], TxData[0], TxData[3], TxData[2]);
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <main+0x17c>)
 80009c6:	789b      	ldrb	r3, [r3, #2]
		sprintf(msg, "\n\rLeft: %x%x mm\n\rRight: %x%x mm",
 80009c8:	f107 000c 	add.w	r0, r7, #12
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	9200      	str	r2, [sp, #0]
 80009d0:	4623      	mov	r3, r4
 80009d2:	460a      	mov	r2, r1
 80009d4:	4915      	ldr	r1, [pc, #84]	@ (8000a2c <main+0x180>)
 80009d6:	f002 ff3d 	bl	8003854 <siprintf>
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData,
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <main+0x184>)
 80009dc:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <main+0x17c>)
 80009de:	490b      	ldr	r1, [pc, #44]	@ (8000a0c <main+0x160>)
 80009e0:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <main+0x15c>)
 80009e2:	f000 fd80 	bl	80014e6 <HAL_CAN_AddTxMessage>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1be      	bne.n	800096a <main+0xbe>
				&TxMailbox) == HAL_OK) {
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fbab 	bl	800014c <strlen>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	f107 010c 	add.w	r1, r7, #12
 80009fe:	2364      	movs	r3, #100	@ 0x64
 8000a00:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <main+0x174>)
 8000a02:	f002 fd53 	bl	80034ac <HAL_UART_Transmit>
		Distance_Left = getDistance(&sensor1);
 8000a06:	e7b0      	b.n	800096a <main+0xbe>
 8000a08:	200000f8 	.word	0x200000f8
 8000a0c:	20000128 	.word	0x20000128
 8000a10:	40011000 	.word	0x40011000
 8000a14:	200000a4 	.word	0x200000a4
 8000a18:	40010c00 	.word	0x40010c00
 8000a1c:	08004350 	.word	0x08004350
 8000a20:	20000148 	.word	0x20000148
 8000a24:	08004354 	.word	0x08004354
 8000a28:	20000120 	.word	0x20000120
 8000a2c:	0800435c 	.word	0x0800435c
 8000a30:	20000140 	.word	0x20000140

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b090      	sub	sp, #64	@ 0x40
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	2228      	movs	r2, #40	@ 0x28
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 ff26 	bl	8003894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	2301      	movs	r3, #1
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a72:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 f8b5 	bl	8002bec <HAL_RCC_OscConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a88:	f000 f8c8 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a90:	2302      	movs	r3, #2
 8000a92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fb22 	bl	80030f0 <HAL_RCC_ClockConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ab2:	f000 f8b3 	bl	8000c1c <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3740      	adds	r7, #64	@ 0x40
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000ac6:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <MX_CAN_Init+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000acc:	2209      	movs	r2, #9
 8000ace:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000ade:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ae2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000ae6:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000aea:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_CAN_Init+0x64>)
 8000b12:	f000 fba9 	bl	8001268 <HAL_CAN_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000b1c:	f000 f87e 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200000f8 	.word	0x200000f8
 8000b28:	40006400 	.word	0x40006400

08000b2c <crc8>:
  * @retval None
  */


/* USER CODE BEGIN 4 */
static uint8_t crc8(uint8_t *data, uint8_t length) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]
	uint8_t polynomial = 0x8C;  // CRC-8 SAE J1850 polynomial
 8000b3c:	238c      	movs	r3, #140	@ 0x8c
 8000b3e:	733b      	strb	r3, [r7, #12]

	for (uint8_t i = 0; i < length; i++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	73bb      	strb	r3, [r7, #14]
 8000b44:	e022      	b.n	8000b8c <crc8+0x60>
		crc ^= data[i];
 8000b46:	7bbb      	ldrb	r3, [r7, #14]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	4053      	eors	r3, r2
 8000b52:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 8; j; j--) {
 8000b54:	2308      	movs	r3, #8
 8000b56:	737b      	strb	r3, [r7, #13]
 8000b58:	e012      	b.n	8000b80 <crc8+0x54>
			if (crc & 0x80) crc = (crc << 1) ^ polynomial;
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	da08      	bge.n	8000b74 <crc8+0x48>
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	b25a      	sxtb	r2, r3
 8000b68:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000b6c:	4053      	eors	r3, r2
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e002      	b.n	8000b7a <crc8+0x4e>
			else crc <<= 1;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 8; j; j--) {
 8000b7a:	7b7b      	ldrb	r3, [r7, #13]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	737b      	strb	r3, [r7, #13]
 8000b80:	7b7b      	ldrb	r3, [r7, #13]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1e9      	bne.n	8000b5a <crc8+0x2e>
	for (uint8_t i = 0; i < length; i++) {
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	73bb      	strb	r3, [r7, #14]
 8000b8c:	7bba      	ldrb	r2, [r7, #14]
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d3d8      	bcc.n	8000b46 <crc8+0x1a>
		}
	}
	return crc;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <encodeNumber>:

static void encodeNumber(uint16_t number, uint8_t index) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	80fb      	strh	r3, [r7, #6]
 8000bac:	4613      	mov	r3, r2
 8000bae:	717b      	strb	r3, [r7, #5]
	TxData[index] = number & 0xFF;
 8000bb0:	797b      	ldrb	r3, [r7, #5]
 8000bb2:	88fa      	ldrh	r2, [r7, #6]
 8000bb4:	b2d1      	uxtb	r1, r2
 8000bb6:	4a07      	ldr	r2, [pc, #28]	@ (8000bd4 <encodeNumber+0x34>)
 8000bb8:	54d1      	strb	r1, [r2, r3]
	TxData[index+1] = (number >> 8) & 0xFF;
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	797b      	ldrb	r3, [r7, #5]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b2d1      	uxtb	r1, r2
 8000bc6:	4a03      	ldr	r2, [pc, #12]	@ (8000bd4 <encodeNumber+0x34>)
 8000bc8:	54d1      	strb	r1, [r2, r3]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000120 	.word	0x20000120

08000bd8 <getDistance>:

static uint16_t getDistance(VL53L1X *sensor){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	uint16_t distance = TOF_GetDistance(sensor);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fbf1 	bl	80003c8 <TOF_GetDistance>
 8000be6:	4603      	mov	r3, r0
 8000be8:	81fb      	strh	r3, [r7, #14]
	if (distance == 0xFFFF) {
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d109      	bne.n	8000c08 <getDistance+0x30>
		HAL_Init();
 8000bf4:	f000 fab2 	bl	800115c <HAL_Init>
		SystemClock_Config();
 8000bf8:	f7ff ff1c 	bl	8000a34 <SystemClock_Config>
		MX_GPIO_Init();
 8000bfc:	f7ff fd7c 	bl	80006f8 <MX_GPIO_Init>
		MX_I2C1_Init();
 8000c00:	f7ff fde8 	bl	80007d4 <MX_I2C1_Init>
		MX_USART1_UART_Init();
 8000c04:	f000 f8f6 	bl	8000df4 <MX_USART1_UART_Init>
	}
	distance = TOF_GetDistance(sensor);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fbdd 	bl	80003c8 <TOF_GetDistance>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	81fb      	strh	r3, [r7, #14]
	return distance;
 8000c12:	89fb      	ldrh	r3, [r7, #14]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <Error_Handler+0x8>

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <HAL_MspInit+0x5c>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <HAL_MspInit+0x5c>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6193      	str	r3, [r2, #24]
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_MspInit+0x5c>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <HAL_MspInit+0x5c>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <HAL_MspInit+0x5c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <HAL_MspInit+0x5c>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_MspInit+0x60>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <HAL_MspInit+0x60>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010000 	.word	0x40010000

08000c8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d18 <HAL_CAN_MspInit+0x8c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d131      	bne.n	8000d10 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cac:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <HAL_CAN_MspInit+0x90>)
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d1c <HAL_CAN_MspInit+0x90>)
 8000cb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cb6:	61d3      	str	r3, [r2, #28]
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <HAL_CAN_MspInit+0x90>)
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <HAL_CAN_MspInit+0x90>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a14      	ldr	r2, [pc, #80]	@ (8000d1c <HAL_CAN_MspInit+0x90>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_CAN_MspInit+0x90>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cdc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ce0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480b      	ldr	r0, [pc, #44]	@ (8000d20 <HAL_CAN_MspInit+0x94>)
 8000cf2:	f000 fdab 	bl	800184c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <HAL_CAN_MspInit+0x94>)
 8000d0c:	f000 fd9e 	bl	800184c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40006400 	.word	0x40006400
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010800 	.word	0x40010800

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <NMI_Handler+0x4>

08000d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 fa38 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f002 fd7a 	bl	80038a4 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20005000 	.word	0x20005000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	20000144 	.word	0x20000144
 8000de4:	200003e0 	.word	0x200003e0

08000de8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <MX_USART1_UART_Init+0x50>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e2c:	f002 faee 	bl	800340c <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e36:	f7ff fef1 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000148 	.word	0x20000148
 8000e44:	40013800 	.word	0x40013800

08000e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed4 <HAL_UART_MspInit+0x8c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d131      	bne.n	8000ecc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480b      	ldr	r0, [pc, #44]	@ (8000edc <HAL_UART_MspInit+0x94>)
 8000eae:	f000 fccd 	bl	800184c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <HAL_UART_MspInit+0x94>)
 8000ec8:	f000 fcc0 	bl	800184c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010800 	.word	0x40010800

08000ee0 <_GetTof>:
extern VL53L1X* registered_sensors[];
extern size_t registered_sensors_cnt;
uint8_t _I2CBuffer[256];

VL53L1X* _GetTof(uint16_t dev)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	for (size_t i = 0; i < registered_sensors_cnt; i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e016      	b.n	8000f1e <_GetTof+0x3e>
		if (registered_sensors[i] != NULL && registered_sensors[i]->id == dev)
 8000ef0:	4a10      	ldr	r2, [pc, #64]	@ (8000f34 <_GetTof+0x54>)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00d      	beq.n	8000f18 <_GetTof+0x38>
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <_GetTof+0x54>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f04:	7b9b      	ldrb	r3, [r3, #14]
 8000f06:	461a      	mov	r2, r3
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d104      	bne.n	8000f18 <_GetTof+0x38>
		{
			return registered_sensors[i];
 8000f0e:	4a09      	ldr	r2, [pc, #36]	@ (8000f34 <_GetTof+0x54>)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	e008      	b.n	8000f2a <_GetTof+0x4a>
	for (size_t i = 0; i < registered_sensors_cnt; i++)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <_GetTof+0x58>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3e3      	bcc.n	8000ef0 <_GetTof+0x10>
		}

	return NULL;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000078 	.word	0x20000078
 8000f38:	0800437c 	.word	0x0800437c

08000f3c <_I2CWrite>:

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	4603      	mov	r3, r0
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	81fb      	strh	r3, [r7, #14]
	VL53L1X* tof = _GetTof(dev);
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ffc7 	bl	8000ee0 <_GetTof>
 8000f52:	6178      	str	r0, [r7, #20]
	if (tof == NULL)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <_I2CWrite+0x22>
		return 1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00d      	b.n	8000f7a <_I2CWrite+0x3e>

	return (int) HAL_I2C_Master_Transmit(tof->hi2c, tof->address << 1, pdata, count, 100);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	791b      	ldrb	r3, [r3, #4]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	2264      	movs	r2, #100	@ 0x64
 8000f70:	9200      	str	r2, [sp, #0]
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f000 ff4a 	bl	8001e0c <HAL_I2C_Master_Transmit>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b088      	sub	sp, #32
 8000f86:	af02      	add	r7, sp, #8
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	81fb      	strh	r3, [r7, #14]
	VL53L1X* tof = _GetTof(dev);
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ffa4 	bl	8000ee0 <_GetTof>
 8000f98:	6178      	str	r0, [r7, #20]
	if (tof == NULL)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <_I2CRead+0x22>
		return 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e00d      	b.n	8000fc0 <_I2CRead+0x3e>

    return (int) HAL_I2C_Master_Receive(tof->hi2c, tof->address << 1, pdata, count, 100);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	791b      	ldrb	r3, [r3, #4]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	b299      	uxth	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	2264      	movs	r2, #100	@ 0x64
 8000fb6:	9200      	str	r2, [sp, #0]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	f001 f825 	bl	8002008 <HAL_I2C_Master_Receive>
 8000fbe:	4603      	mov	r3, r0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	80bb      	strh	r3, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <VL53L1_WrByte+0x54>)
 8000fe8:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8000fea:	88bb      	ldrh	r3, [r7, #4]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <VL53L1_WrByte+0x54>)
 8000ff0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <VL53L1_WrByte+0x54>)
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	4907      	ldr	r1, [pc, #28]	@ (800101c <VL53L1_WrByte+0x54>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff9c 	bl	8000f3c <_I2CWrite>
 8001004:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800100c:	23f3      	movs	r3, #243	@ 0xf3
 800100e:	73fb      	strb	r3, [r7, #15]
    }
    return Status;}
 8001010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000190 	.word	0x20000190

08001020 <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	603a      	str	r2, [r7, #0]
 800102a:	80fb      	strh	r3, [r7, #6]
 800102c:	460b      	mov	r3, r1
 800102e:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b29b      	uxth	r3, r3
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <VL53L1_RdByte+0x6c>)
 800103e:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <VL53L1_RdByte+0x6c>)
 8001046:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	2202      	movs	r2, #2
 800104c:	490f      	ldr	r1, [pc, #60]	@ (800108c <VL53L1_RdByte+0x6c>)
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff74 	bl	8000f3c <_I2CWrite>
 8001054:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800105c:	23f3      	movs	r3, #243	@ 0xf3
 800105e:	73fb      	strb	r3, [r7, #15]
        goto done;
 8001060:	e00d      	b.n	800107e <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(dev, data, 1);
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2201      	movs	r2, #1
 8001066:	6839      	ldr	r1, [r7, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff8a 	bl	8000f82 <_I2CRead>
 800106e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001076:	23f3      	movs	r3, #243	@ 0xf3
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	e000      	b.n	800107e <VL53L1_RdByte+0x5e>
    }
done:
 800107c:	bf00      	nop

	return Status;
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000190 	.word	0x20000190

08001090 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	603a      	str	r2, [r7, #0]
 800109a:	80fb      	strh	r3, [r7, #6]
 800109c:	460b      	mov	r3, r1
 800109e:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80010a4:	88bb      	ldrh	r3, [r7, #4]
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <VL53L1_RdWord+0x7c>)
 80010ae:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80010b0:	88bb      	ldrh	r3, [r7, #4]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <VL53L1_RdWord+0x7c>)
 80010b6:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	2202      	movs	r2, #2
 80010bc:	4913      	ldr	r1, [pc, #76]	@ (800110c <VL53L1_RdWord+0x7c>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff3c 	bl	8000f3c <_I2CWrite>
 80010c4:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80010cc:	23f3      	movs	r3, #243	@ 0xf3
 80010ce:	73fb      	strb	r3, [r7, #15]
        goto done;
 80010d0:	e016      	b.n	8001100 <VL53L1_RdWord+0x70>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	2202      	movs	r2, #2
 80010d6:	490d      	ldr	r1, [pc, #52]	@ (800110c <VL53L1_RdWord+0x7c>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff52 	bl	8000f82 <_I2CRead>
 80010de:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80010e6:	23f3      	movs	r3, #243	@ 0xf3
 80010e8:	73fb      	strb	r3, [r7, #15]
        goto done;
 80010ea:	e009      	b.n	8001100 <VL53L1_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <VL53L1_RdWord+0x7c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4a05      	ldr	r2, [pc, #20]	@ (800110c <VL53L1_RdWord+0x7c>)
 80010f6:	7852      	ldrb	r2, [r2, #1]
 80010f8:	4413      	add	r3, r2
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 8001100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000190 	.word	0x20000190

08001110 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001110:	f7ff fe6a 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480b      	ldr	r0, [pc, #44]	@ (8001144 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001116:	490c      	ldr	r1, [pc, #48]	@ (8001148 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001118:	4a0c      	ldr	r2, [pc, #48]	@ (800114c <LoopFillZerobss+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800112c:	4c09      	ldr	r4, [pc, #36]	@ (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f002 fbb9 	bl	80038b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113e:	f7ff fbb5 	bl	80008ac <main>
  bx lr
 8001142:	4770      	bx	lr
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800114c:	0800444c 	.word	0x0800444c
  ldr r2, =_sbss
 8001150:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001154:	200003dc 	.word	0x200003dc

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <HAL_Init+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <HAL_Init+0x28>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 fb39 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	200f      	movs	r0, #15
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fd56 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fb43 	bl	8001832 <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 fb19 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000004 	.word	0x20000004

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a03      	ldr	r2, [pc, #12]	@ (8001208 <HAL_IncTick+0x20>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000008 	.word	0x20000008
 8001208:	20000290 	.word	0x20000290

0800120c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	@ (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	20000290 	.word	0x20000290

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff fff0 	bl	800120c <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffe0 	bl	800120c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008

08001268 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0ed      	b.n	8001456 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fd00 	bl	8000c8c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0201 	orr.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800129c:	f7ff ffb6 	bl	800120c <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012a2:	e012      	b.n	80012ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a4:	f7ff ffb2 	bl	800120c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b0a      	cmp	r3, #10
 80012b0:	d90b      	bls.n	80012ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2205      	movs	r2, #5
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e0c5      	b.n	8001456 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0e5      	beq.n	80012a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0202 	bic.w	r2, r2, #2
 80012e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e8:	f7ff ff90 	bl	800120c <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ee:	e012      	b.n	8001316 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f0:	f7ff ff8c 	bl	800120c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b0a      	cmp	r3, #10
 80012fc:	d90b      	bls.n	8001316 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001302:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2205      	movs	r2, #5
 800130e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e09f      	b.n	8001456 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e5      	bne.n	80012f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7e1b      	ldrb	r3, [r3, #24]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d108      	bne.n	800133e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e007      	b.n	800134e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7e5b      	ldrb	r3, [r3, #25]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d108      	bne.n	8001368 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e007      	b.n	8001378 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001376:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7e9b      	ldrb	r3, [r3, #26]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d108      	bne.n	8001392 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0220 	orr.w	r2, r2, #32
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e007      	b.n	80013a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0220 	bic.w	r2, r2, #32
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7edb      	ldrb	r3, [r3, #27]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d108      	bne.n	80013bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0210 	bic.w	r2, r2, #16
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	e007      	b.n	80013cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0210 	orr.w	r2, r2, #16
 80013ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7f1b      	ldrb	r3, [r3, #28]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d108      	bne.n	80013e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0208 	orr.w	r2, r2, #8
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e007      	b.n	80013f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0208 	bic.w	r2, r2, #8
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7f5b      	ldrb	r3, [r3, #29]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d108      	bne.n	8001410 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0204 	orr.w	r2, r2, #4
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e007      	b.n	8001420 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0204 	bic.w	r2, r2, #4
 800141e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	ea42 0103 	orr.w	r1, r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d12e      	bne.n	80014d0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2202      	movs	r2, #2
 8001476:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0201 	bic.w	r2, r2, #1
 8001488:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800148a:	f7ff febf 	bl	800120c <HAL_GetTick>
 800148e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001490:	e012      	b.n	80014b8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001492:	f7ff febb 	bl	800120c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b0a      	cmp	r3, #10
 800149e:	d90b      	bls.n	80014b8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2205      	movs	r2, #5
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e012      	b.n	80014de <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1e5      	bne.n	8001492 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e006      	b.n	80014de <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
  }
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b089      	sub	sp, #36	@ 0x24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001504:	7ffb      	ldrb	r3, [r7, #31]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d003      	beq.n	8001512 <HAL_CAN_AddTxMessage+0x2c>
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	2b02      	cmp	r3, #2
 800150e:	f040 80ad 	bne.w	800166c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10a      	bne.n	8001532 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001522:	2b00      	cmp	r3, #0
 8001524:	d105      	bne.n	8001532 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 8095 	beq.w	800165c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	0e1b      	lsrs	r3, r3, #24
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800153c:	2201      	movs	r2, #1
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	409a      	lsls	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	6809      	ldr	r1, [r1, #0]
 800155c:	431a      	orrs	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3318      	adds	r3, #24
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e00f      	b.n	800158a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001574:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800157e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3318      	adds	r3, #24
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	440b      	add	r3, r1
 8001588:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6819      	ldr	r1, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3318      	adds	r3, #24
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	440b      	add	r3, r1
 800159a:	3304      	adds	r3, #4
 800159c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	7d1b      	ldrb	r3, [r3, #20]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d111      	bne.n	80015ca <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3318      	adds	r3, #24
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4413      	add	r3, r2
 80015b2:	3304      	adds	r3, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3318      	adds	r3, #24
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	440b      	add	r3, r1
 80015c6:	3304      	adds	r3, #4
 80015c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3307      	adds	r3, #7
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	061a      	lsls	r2, r3, #24
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3306      	adds	r3, #6
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3305      	adds	r3, #5
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	4313      	orrs	r3, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	3204      	adds	r2, #4
 80015ea:	7812      	ldrb	r2, [r2, #0]
 80015ec:	4610      	mov	r0, r2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	6811      	ldr	r1, [r2, #0]
 80015f2:	ea43 0200 	orr.w	r2, r3, r0
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	440b      	add	r3, r1
 80015fc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001600:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3303      	adds	r3, #3
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	061a      	lsls	r2, r3, #24
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3302      	adds	r3, #2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	4313      	orrs	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	4610      	mov	r0, r2
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	6811      	ldr	r1, [r2, #0]
 8001628:	ea43 0200 	orr.w	r2, r3, r0
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001636:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3318      	adds	r3, #24
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4413      	add	r3, r2
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	6811      	ldr	r1, [r2, #0]
 800164a:	f043 0201 	orr.w	r2, r3, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3318      	adds	r3, #24
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	440b      	add	r3, r1
 8001656:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	e00e      	b.n	800167a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001660:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e006      	b.n	800167a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
  }
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	@ 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	@ (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	@ (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	@ 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff90 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff49 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff5e 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff90 	bl	800173c <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5f 	bl	80016e8 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffb0 	bl	80017a0 <SysTick_Config>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	@ 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e169      	b.n	8001b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001860:	2201      	movs	r2, #1
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8158 	bne.w	8001b2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a9a      	ldr	r2, [pc, #616]	@ (8001aec <HAL_GPIO_Init+0x2a0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d05e      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001888:	4a98      	ldr	r2, [pc, #608]	@ (8001aec <HAL_GPIO_Init+0x2a0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d875      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800188e:	4a98      	ldr	r2, [pc, #608]	@ (8001af0 <HAL_GPIO_Init+0x2a4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d058      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001894:	4a96      	ldr	r2, [pc, #600]	@ (8001af0 <HAL_GPIO_Init+0x2a4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d86f      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800189a:	4a96      	ldr	r2, [pc, #600]	@ (8001af4 <HAL_GPIO_Init+0x2a8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d052      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018a0:	4a94      	ldr	r2, [pc, #592]	@ (8001af4 <HAL_GPIO_Init+0x2a8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d869      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018a6:	4a94      	ldr	r2, [pc, #592]	@ (8001af8 <HAL_GPIO_Init+0x2ac>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d04c      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018ac:	4a92      	ldr	r2, [pc, #584]	@ (8001af8 <HAL_GPIO_Init+0x2ac>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d863      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018b2:	4a92      	ldr	r2, [pc, #584]	@ (8001afc <HAL_GPIO_Init+0x2b0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d046      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018b8:	4a90      	ldr	r2, [pc, #576]	@ (8001afc <HAL_GPIO_Init+0x2b0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d85d      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d82a      	bhi.n	8001918 <HAL_GPIO_Init+0xcc>
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	d859      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018c6:	a201      	add	r2, pc, #4	@ (adr r2, 80018cc <HAL_GPIO_Init+0x80>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	08001947 	.word	0x08001947
 80018d0:	08001921 	.word	0x08001921
 80018d4:	08001933 	.word	0x08001933
 80018d8:	08001975 	.word	0x08001975
 80018dc:	0800197b 	.word	0x0800197b
 80018e0:	0800197b 	.word	0x0800197b
 80018e4:	0800197b 	.word	0x0800197b
 80018e8:	0800197b 	.word	0x0800197b
 80018ec:	0800197b 	.word	0x0800197b
 80018f0:	0800197b 	.word	0x0800197b
 80018f4:	0800197b 	.word	0x0800197b
 80018f8:	0800197b 	.word	0x0800197b
 80018fc:	0800197b 	.word	0x0800197b
 8001900:	0800197b 	.word	0x0800197b
 8001904:	0800197b 	.word	0x0800197b
 8001908:	0800197b 	.word	0x0800197b
 800190c:	0800197b 	.word	0x0800197b
 8001910:	08001929 	.word	0x08001929
 8001914:	0800193d 	.word	0x0800193d
 8001918:	4a79      	ldr	r2, [pc, #484]	@ (8001b00 <HAL_GPIO_Init+0x2b4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800191e:	e02c      	b.n	800197a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e029      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	3304      	adds	r3, #4
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e024      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	3308      	adds	r3, #8
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e01f      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	330c      	adds	r3, #12
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e01a      	b.n	800197c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800194e:	2304      	movs	r3, #4
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e013      	b.n	800197c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	611a      	str	r2, [r3, #16]
          break;
 8001966:	e009      	b.n	800197c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001968:	2308      	movs	r3, #8
 800196a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	615a      	str	r2, [r3, #20]
          break;
 8001972:	e003      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x130>
          break;
 800197a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	@ 0xff
 8001980:	d801      	bhi.n	8001986 <HAL_GPIO_Init+0x13a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	e001      	b.n	800198a <HAL_GPIO_Init+0x13e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2bff      	cmp	r3, #255	@ 0xff
 8001990:	d802      	bhi.n	8001998 <HAL_GPIO_Init+0x14c>
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x152>
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	3b08      	subs	r3, #8
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	210f      	movs	r1, #15
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	6a39      	ldr	r1, [r7, #32]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80b1 	beq.w	8001b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001b04 <HAL_GPIO_Init+0x2b8>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001b04 <HAL_GPIO_Init+0x2b8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001b04 <HAL_GPIO_Init+0x2b8>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e4:	4a48      	ldr	r2, [pc, #288]	@ (8001b08 <HAL_GPIO_Init+0x2bc>)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a40      	ldr	r2, [pc, #256]	@ (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_GPIO_Init+0x1ec>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3f      	ldr	r2, [pc, #252]	@ (8001b10 <HAL_GPIO_Init+0x2c4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1e8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b14 <HAL_GPIO_Init+0x2c8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1e4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a3d      	ldr	r2, [pc, #244]	@ (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1e0>
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x1ee>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a4a:	492f      	ldr	r1, [pc, #188]	@ (8001b08 <HAL_GPIO_Init+0x2bc>)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a64:	4b2d      	ldr	r3, [pc, #180]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	492c      	ldr	r1, [pc, #176]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a72:	4b2a      	ldr	r3, [pc, #168]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4928      	ldr	r1, [pc, #160]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a8c:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4922      	ldr	r1, [pc, #136]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60cb      	str	r3, [r1, #12]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a9a:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	491e      	ldr	r1, [pc, #120]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4918      	ldr	r1, [pc, #96]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ac2:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4914      	ldr	r1, [pc, #80]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d021      	beq.n	8001b20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001adc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	490e      	ldr	r1, [pc, #56]	@ (8001b1c <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e021      	b.n	8001b2e <HAL_GPIO_Init+0x2e2>
 8001aea:	bf00      	nop
 8001aec:	10320000 	.word	0x10320000
 8001af0:	10310000 	.word	0x10310000
 8001af4:	10220000 	.word	0x10220000
 8001af8:	10210000 	.word	0x10210000
 8001afc:	10120000 	.word	0x10120000
 8001b00:	10110000 	.word	0x10110000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	40010800 	.word	0x40010800
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	40011000 	.word	0x40011000
 8001b18:	40011400 	.word	0x40011400
 8001b1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <HAL_GPIO_Init+0x304>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4909      	ldr	r1, [pc, #36]	@ (8001b50 <HAL_GPIO_Init+0x304>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	3301      	adds	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f47f ae8e 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	372c      	adds	r7, #44	@ 0x2c
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b70:	e003      	b.n	8001b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e12b      	b.n	8001dee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fe40 	bl	8000830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	@ 0x24
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001be8:	f001 fbca 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 8001bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4a81      	ldr	r2, [pc, #516]	@ (8001df8 <HAL_I2C_Init+0x274>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d807      	bhi.n	8001c08 <HAL_I2C_Init+0x84>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4a80      	ldr	r2, [pc, #512]	@ (8001dfc <HAL_I2C_Init+0x278>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	bf94      	ite	ls
 8001c00:	2301      	movls	r3, #1
 8001c02:	2300      	movhi	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e006      	b.n	8001c16 <HAL_I2C_Init+0x92>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4a7d      	ldr	r2, [pc, #500]	@ (8001e00 <HAL_I2C_Init+0x27c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	bf94      	ite	ls
 8001c10:	2301      	movls	r3, #1
 8001c12:	2300      	movhi	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0e7      	b.n	8001dee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4a78      	ldr	r2, [pc, #480]	@ (8001e04 <HAL_I2C_Init+0x280>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	0c9b      	lsrs	r3, r3, #18
 8001c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001df8 <HAL_I2C_Init+0x274>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d802      	bhi.n	8001c58 <HAL_I2C_Init+0xd4>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3301      	adds	r3, #1
 8001c56:	e009      	b.n	8001c6c <HAL_I2C_Init+0xe8>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	4a69      	ldr	r2, [pc, #420]	@ (8001e08 <HAL_I2C_Init+0x284>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	495c      	ldr	r1, [pc, #368]	@ (8001df8 <HAL_I2C_Init+0x274>)
 8001c88:	428b      	cmp	r3, r1
 8001c8a:	d819      	bhi.n	8001cc0 <HAL_I2C_Init+0x13c>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e59      	subs	r1, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9a:	1c59      	adds	r1, r3, #1
 8001c9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <HAL_I2C_Init+0x138>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1e59      	subs	r1, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cba:	e051      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e04f      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d111      	bne.n	8001cec <HAL_I2C_Init+0x168>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e58      	subs	r0, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	440b      	add	r3, r1
 8001cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e012      	b.n	8001d12 <HAL_I2C_Init+0x18e>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	0099      	lsls	r1, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Init+0x196>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e022      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10e      	bne.n	8001d40 <HAL_I2C_Init+0x1bc>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1e58      	subs	r0, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	440b      	add	r3, r1
 8001d30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d3e:	e00f      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e58      	subs	r0, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	0099      	lsls	r1, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	6809      	ldr	r1, [r1, #0]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6911      	ldr	r1, [r2, #16]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68d2      	ldr	r2, [r2, #12]
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	000186a0 	.word	0x000186a0
 8001dfc:	001e847f 	.word	0x001e847f
 8001e00:	003d08ff 	.word	0x003d08ff
 8001e04:	431bde83 	.word	0x431bde83
 8001e08:	10624dd3 	.word	0x10624dd3

08001e0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	461a      	mov	r2, r3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	817b      	strh	r3, [r7, #10]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff f9f4 	bl	800120c <HAL_GetTick>
 8001e24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	f040 80e0 	bne.w	8001ff4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2319      	movs	r3, #25
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4970      	ldr	r1, [pc, #448]	@ (8002000 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fc9e 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e0d3      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_I2C_Master_Transmit+0x50>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e0cc      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d007      	beq.n	8001e82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2221      	movs	r2, #33	@ 0x21
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	893a      	ldrh	r2, [r7, #8]
 8001eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4a50      	ldr	r2, [pc, #320]	@ (8002004 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ec4:	8979      	ldrh	r1, [r7, #10]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	6a3a      	ldr	r2, [r7, #32]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fb08 	bl	80024e0 <I2C_MasterRequestWrite>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e08d      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ef0:	e066      	b.n	8001fc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	6a39      	ldr	r1, [r7, #32]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fd5c 	bl	80029b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00d      	beq.n	8001f1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d107      	bne.n	8001f1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e06b      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d11b      	bne.n	8001f94 <HAL_I2C_Master_Transmit+0x188>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d017      	beq.n	8001f94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	6a39      	ldr	r1, [r7, #32]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 fd53 	bl	8002a44 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d107      	bne.n	8001fbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e01a      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d194      	bne.n	8001ef2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
  }
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	00100002 	.word	0x00100002
 8002004:	ffff0000 	.word	0xffff0000

08002008 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	@ 0x30
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	461a      	mov	r2, r3
 8002014:	460b      	mov	r3, r1
 8002016:	817b      	strh	r3, [r7, #10]
 8002018:	4613      	mov	r3, r2
 800201a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff f8f4 	bl	800120c <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b20      	cmp	r3, #32
 8002030:	f040 824b 	bne.w	80024ca <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2319      	movs	r3, #25
 800203a:	2201      	movs	r2, #1
 800203c:	497f      	ldr	r1, [pc, #508]	@ (800223c <HAL_I2C_Master_Receive+0x234>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fb9e 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
 800204c:	e23e      	b.n	80024cc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_I2C_Master_Receive+0x54>
 8002058:	2302      	movs	r3, #2
 800205a:	e237      	b.n	80024cc <HAL_I2C_Master_Receive+0x4c4>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d007      	beq.n	8002082 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0201 	orr.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2222      	movs	r2, #34	@ 0x22
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2210      	movs	r2, #16
 800209e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	893a      	ldrh	r2, [r7, #8]
 80020b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4a5f      	ldr	r2, [pc, #380]	@ (8002240 <HAL_I2C_Master_Receive+0x238>)
 80020c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020c4:	8979      	ldrh	r1, [r7, #10]
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fa8a 	bl	80025e4 <I2C_MasterRequestRead>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e1f8      	b.n	80024cc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d113      	bne.n	800210a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e1cc      	b.n	80024a4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210e:	2b01      	cmp	r3, #1
 8002110:	d11e      	bne.n	8002150 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002120:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002122:	b672      	cpsid	i
}
 8002124:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800214c:	b662      	cpsie	i
}
 800214e:	e035      	b.n	80021bc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002154:	2b02      	cmp	r3, #2
 8002156:	d11e      	bne.n	8002196 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002166:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002190:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002192:	b662      	cpsie	i
}
 8002194:	e012      	b.n	80021bc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80021bc:	e172      	b.n	80024a4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	f200 811f 	bhi.w	8002406 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d123      	bne.n	8002218 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fc7d 	bl	8002ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e173      	b.n	80024cc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002216:	e145      	b.n	80024a4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221c:	2b02      	cmp	r3, #2
 800221e:	d152      	bne.n	80022c6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002226:	2200      	movs	r2, #0
 8002228:	4906      	ldr	r1, [pc, #24]	@ (8002244 <HAL_I2C_Master_Receive+0x23c>)
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 faa8 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e148      	b.n	80024cc <HAL_I2C_Master_Receive+0x4c4>
 800223a:	bf00      	nop
 800223c:	00100002 	.word	0x00100002
 8002240:	ffff0000 	.word	0xffff0000
 8002244:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800225a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800228e:	b662      	cpsie	i
}
 8002290:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022c4:	e0ee      	b.n	80024a4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022cc:	2200      	movs	r2, #0
 80022ce:	4981      	ldr	r1, [pc, #516]	@ (80024d4 <HAL_I2C_Master_Receive+0x4cc>)
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fa55 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0f5      	b.n	80024cc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022f0:	b672      	cpsid	i
}
 80022f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002326:	4b6c      	ldr	r3, [pc, #432]	@ (80024d8 <HAL_I2C_Master_Receive+0x4d0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	08db      	lsrs	r3, r3, #3
 800232c:	4a6b      	ldr	r2, [pc, #428]	@ (80024dc <HAL_I2C_Master_Receive+0x4d4>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0a1a      	lsrs	r2, r3, #8
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00da      	lsls	r2, r3, #3
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	3b01      	subs	r3, #1
 8002344:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d118      	bne.n	800237e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f043 0220 	orr.w	r2, r3, #32
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800236e:	b662      	cpsie	i
}
 8002370:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0a6      	b.n	80024cc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b04      	cmp	r3, #4
 800238a:	d1d9      	bne.n	8002340 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800239a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023ce:	b662      	cpsie	i
}
 80023d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002404:	e04e      	b.n	80024a4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002408:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fb62 	bl	8002ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e058      	b.n	80024cc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b04      	cmp	r3, #4
 8002458:	d124      	bne.n	80024a4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245e:	2b03      	cmp	r3, #3
 8002460:	d107      	bne.n	8002472 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002470:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f47f ae88 	bne.w	80021be <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
  }
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3728      	adds	r7, #40	@ 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	00010004 	.word	0x00010004
 80024d8:	20000000 	.word	0x20000000
 80024dc:	14f8b589 	.word	0x14f8b589

080024e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	460b      	mov	r3, r1
 80024ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d006      	beq.n	800250a <I2C_MasterRequestWrite+0x2a>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d003      	beq.n	800250a <I2C_MasterRequestWrite+0x2a>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002508:	d108      	bne.n	800251c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e00b      	b.n	8002534 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	2b12      	cmp	r3, #18
 8002522:	d107      	bne.n	8002534 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f91d 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800255a:	d103      	bne.n	8002564 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e035      	b.n	80025d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002570:	d108      	bne.n	8002584 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002572:	897b      	ldrh	r3, [r7, #10]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002580:	611a      	str	r2, [r3, #16]
 8002582:	e01b      	b.n	80025bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002584:	897b      	ldrh	r3, [r7, #10]
 8002586:	11db      	asrs	r3, r3, #7
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f003 0306 	and.w	r3, r3, #6
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f063 030f 	orn	r3, r3, #15
 8002594:	b2da      	uxtb	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	490e      	ldr	r1, [pc, #56]	@ (80025dc <I2C_MasterRequestWrite+0xfc>)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f966 	bl	8002874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e010      	b.n	80025d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025b2:	897b      	ldrh	r3, [r7, #10]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4907      	ldr	r1, [pc, #28]	@ (80025e0 <I2C_MasterRequestWrite+0x100>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f956 	bl	8002874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	00010008 	.word	0x00010008
 80025e0:	00010002 	.word	0x00010002

080025e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	460b      	mov	r3, r1
 80025f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002608:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d006      	beq.n	800261e <I2C_MasterRequestRead+0x3a>
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d003      	beq.n	800261e <I2C_MasterRequestRead+0x3a>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800261c:	d108      	bne.n	8002630 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e00b      	b.n	8002648 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002634:	2b11      	cmp	r3, #17
 8002636:	d107      	bne.n	8002648 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002646:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f893 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800266e:	d103      	bne.n	8002678 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002676:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e079      	b.n	8002770 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002684:	d108      	bne.n	8002698 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	611a      	str	r2, [r3, #16]
 8002696:	e05f      	b.n	8002758 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002698:	897b      	ldrh	r3, [r7, #10]
 800269a:	11db      	asrs	r3, r3, #7
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f003 0306 	and.w	r3, r3, #6
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f063 030f 	orn	r3, r3, #15
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4930      	ldr	r1, [pc, #192]	@ (8002778 <I2C_MasterRequestRead+0x194>)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f8dc 	bl	8002874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e054      	b.n	8002770 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4929      	ldr	r1, [pc, #164]	@ (800277c <I2C_MasterRequestRead+0x198>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f8cc 	bl	8002874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e044      	b.n	8002770 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800270a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f831 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002732:	d103      	bne.n	800273c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e017      	b.n	8002770 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002740:	897b      	ldrh	r3, [r7, #10]
 8002742:	11db      	asrs	r3, r3, #7
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 0306 	and.w	r3, r3, #6
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f063 030e 	orn	r3, r3, #14
 8002750:	b2da      	uxtb	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4907      	ldr	r1, [pc, #28]	@ (800277c <I2C_MasterRequestRead+0x198>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f888 	bl	8002874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	00010008 	.word	0x00010008
 800277c:	00010002 	.word	0x00010002

08002780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002790:	e048      	b.n	8002824 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d044      	beq.n	8002824 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279a:	f7fe fd37 	bl	800120c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d139      	bne.n	8002824 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	0c1b      	lsrs	r3, r3, #16
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10d      	bne.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	43da      	mvns	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4013      	ands	r3, r2
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	e00c      	b.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	43da      	mvns	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4013      	ands	r3, r2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d116      	bne.n	8002824 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e023      	b.n	800286c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	0c1b      	lsrs	r3, r3, #16
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d10d      	bne.n	800284a <I2C_WaitOnFlagUntilTimeout+0xca>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	43da      	mvns	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4013      	ands	r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	e00c      	b.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	43da      	mvns	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4013      	ands	r3, r2
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	429a      	cmp	r2, r3
 8002868:	d093      	beq.n	8002792 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002882:	e071      	b.n	8002968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002892:	d123      	bne.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c8:	f043 0204 	orr.w	r2, r3, #4
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e067      	b.n	80029ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e2:	d041      	beq.n	8002968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e4:	f7fe fc92 	bl	800120c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d302      	bcc.n	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d136      	bne.n	8002968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10c      	bne.n	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e00b      	b.n	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	43da      	mvns	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d016      	beq.n	8002968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e021      	b.n	80029ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	0c1b      	lsrs	r3, r3, #16
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d10c      	bne.n	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	43da      	mvns	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4013      	ands	r3, r2
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e00b      	b.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4013      	ands	r3, r2
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf14      	ite	ne
 800299e:	2301      	movne	r3, #1
 80029a0:	2300      	moveq	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f47f af6d 	bne.w	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c0:	e034      	b.n	8002a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f8e3 	bl	8002b8e <I2C_IsAcknowledgeFailed>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e034      	b.n	8002a3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d028      	beq.n	8002a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029da:	f7fe fc17 	bl	800120c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d302      	bcc.n	80029f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d11d      	bne.n	8002a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fa:	2b80      	cmp	r3, #128	@ 0x80
 80029fc:	d016      	beq.n	8002a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e007      	b.n	8002a3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a36:	2b80      	cmp	r3, #128	@ 0x80
 8002a38:	d1c3      	bne.n	80029c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a50:	e034      	b.n	8002abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f89b 	bl	8002b8e <I2C_IsAcknowledgeFailed>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e034      	b.n	8002acc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d028      	beq.n	8002abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7fe fbcf 	bl	800120c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d11d      	bne.n	8002abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d016      	beq.n	8002abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e007      	b.n	8002acc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d1c3      	bne.n	8002a52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ae0:	e049      	b.n	8002b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d119      	bne.n	8002b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0210 	mvn.w	r2, #16
 8002af8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e030      	b.n	8002b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b24:	f7fe fb72 	bl	800120c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d302      	bcc.n	8002b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11d      	bne.n	8002b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b44:	2b40      	cmp	r3, #64	@ 0x40
 8002b46:	d016      	beq.n	8002b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f043 0220 	orr.w	r2, r3, #32
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e007      	b.n	8002b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b80:	2b40      	cmp	r3, #64	@ 0x40
 8002b82:	d1ae      	bne.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba4:	d11b      	bne.n	8002bde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e272      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8087 	beq.w	8002d1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c0c:	4b92      	ldr	r3, [pc, #584]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d00c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c18:	4b8f      	ldr	r3, [pc, #572]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d112      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5e>
 8002c24:	4b8c      	ldr	r3, [pc, #560]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c30:	d10b      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c32:	4b89      	ldr	r3, [pc, #548]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d06c      	beq.n	8002d18 <HAL_RCC_OscConfig+0x12c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d168      	bne.n	8002d18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e24c      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x76>
 8002c54:	4b80      	ldr	r3, [pc, #512]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a7f      	ldr	r2, [pc, #508]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e02e      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x98>
 8002c6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7a      	ldr	r2, [pc, #488]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b78      	ldr	r3, [pc, #480]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a77      	ldr	r2, [pc, #476]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e01d      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xbc>
 8002c8e:	4b72      	ldr	r3, [pc, #456]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a71      	ldr	r2, [pc, #452]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
 8002ca8:	4b6b      	ldr	r3, [pc, #428]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a6a      	ldr	r2, [pc, #424]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b68      	ldr	r3, [pc, #416]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a67      	ldr	r2, [pc, #412]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe faa0 	bl	800120c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fa9c 	bl	800120c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	@ 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e200      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xe4>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fa8c 	bl	800120c <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fa88 	bl	800120c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	@ 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1ec      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	4b53      	ldr	r3, [pc, #332]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x10c>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d063      	beq.n	8002dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d26:	4b4c      	ldr	r3, [pc, #304]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d32:	4b49      	ldr	r3, [pc, #292]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d11c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x18c>
 8002d3e:	4b46      	ldr	r3, [pc, #280]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	4b43      	ldr	r3, [pc, #268]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x176>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1c0      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b3d      	ldr	r3, [pc, #244]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4939      	ldr	r1, [pc, #228]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	e03a      	b.n	8002dee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d80:	4b36      	ldr	r3, [pc, #216]	@ (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe fa41 	bl	800120c <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fa3d 	bl	800120c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e1a1      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b2a      	ldr	r3, [pc, #168]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4927      	ldr	r1, [pc, #156]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc2:	4b26      	ldr	r3, [pc, #152]	@ (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fa20 	bl	800120c <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fa1c 	bl	800120c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e180      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d03a      	beq.n	8002e70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d019      	beq.n	8002e36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7fe fa00 	bl	800120c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fe f9fc 	bl	800120c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e160      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f000 face 	bl	80033d0 <RCC_Delay>
 8002e34:	e01c      	b.n	8002e70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e36:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3c:	f7fe f9e6 	bl	800120c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e42:	e00f      	b.n	8002e64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe f9e2 	bl	800120c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d908      	bls.n	8002e64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e146      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	42420000 	.word	0x42420000
 8002e60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b92      	ldr	r3, [pc, #584]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e9      	bne.n	8002e44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a6 	beq.w	8002fca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b8b      	ldr	r3, [pc, #556]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	4b88      	ldr	r3, [pc, #544]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4a87      	ldr	r2, [pc, #540]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e98:	61d3      	str	r3, [r2, #28]
 8002e9a:	4b85      	ldr	r3, [pc, #532]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b82      	ldr	r3, [pc, #520]	@ (80030b4 <HAL_RCC_OscConfig+0x4c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80030b4 <HAL_RCC_OscConfig+0x4c8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7e      	ldr	r2, [pc, #504]	@ (80030b4 <HAL_RCC_OscConfig+0x4c8>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe f9a3 	bl	800120c <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe f99f 	bl	800120c <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b64      	cmp	r3, #100	@ 0x64
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e103      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	4b75      	ldr	r3, [pc, #468]	@ (80030b4 <HAL_RCC_OscConfig+0x4c8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x312>
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	e02d      	b.n	8002f5a <HAL_RCC_OscConfig+0x36e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x334>
 8002f06:	4b6a      	ldr	r3, [pc, #424]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a69      	ldr	r2, [pc, #420]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6213      	str	r3, [r2, #32]
 8002f12:	4b67      	ldr	r3, [pc, #412]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4a66      	ldr	r2, [pc, #408]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	6213      	str	r3, [r2, #32]
 8002f1e:	e01c      	b.n	8002f5a <HAL_RCC_OscConfig+0x36e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x356>
 8002f28:	4b61      	ldr	r3, [pc, #388]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4a60      	ldr	r2, [pc, #384]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6213      	str	r3, [r2, #32]
 8002f34:	4b5e      	ldr	r3, [pc, #376]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4a5d      	ldr	r2, [pc, #372]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6213      	str	r3, [r2, #32]
 8002f40:	e00b      	b.n	8002f5a <HAL_RCC_OscConfig+0x36e>
 8002f42:	4b5b      	ldr	r3, [pc, #364]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4a5a      	ldr	r2, [pc, #360]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	6213      	str	r3, [r2, #32]
 8002f4e:	4b58      	ldr	r3, [pc, #352]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	4a57      	ldr	r2, [pc, #348]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d015      	beq.n	8002f8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7fe f953 	bl	800120c <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe f94f 	bl	800120c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0b1      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f80:	4b4b      	ldr	r3, [pc, #300]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ee      	beq.n	8002f6a <HAL_RCC_OscConfig+0x37e>
 8002f8c:	e014      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe f93d 	bl	800120c <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe f939 	bl	800120c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e09b      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fac:	4b40      	ldr	r3, [pc, #256]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ee      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d105      	bne.n	8002fca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4a3b      	ldr	r2, [pc, #236]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8087 	beq.w	80030e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd4:	4b36      	ldr	r3, [pc, #216]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d061      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d146      	bne.n	8003076 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b33      	ldr	r3, [pc, #204]	@ (80030b8 <HAL_RCC_OscConfig+0x4cc>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe f90d 	bl	800120c <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe f909 	bl	800120c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e06d      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003008:	4b29      	ldr	r3, [pc, #164]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800301c:	d108      	bne.n	8003030 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800301e:	4b24      	ldr	r3, [pc, #144]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	4921      	ldr	r1, [pc, #132]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003030:	4b1f      	ldr	r3, [pc, #124]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a19      	ldr	r1, [r3, #32]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	430b      	orrs	r3, r1
 8003042:	491b      	ldr	r1, [pc, #108]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <HAL_RCC_OscConfig+0x4cc>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fe f8dd 	bl	800120c <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7fe f8d9 	bl	800120c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e03d      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x46a>
 8003074:	e035      	b.n	80030e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <HAL_RCC_OscConfig+0x4cc>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe f8c6 	bl	800120c <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe f8c2 	bl	800120c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e026      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x498>
 80030a2:	e01e      	b.n	80030e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e019      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40007000 	.word	0x40007000
 80030b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_RCC_OscConfig+0x500>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000

080030f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0d0      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b6a      	ldr	r3, [pc, #424]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d910      	bls.n	8003134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b67      	ldr	r3, [pc, #412]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 0207 	bic.w	r2, r3, #7
 800311a:	4965      	ldr	r1, [pc, #404]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b63      	ldr	r3, [pc, #396]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b8      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800314c:	4b59      	ldr	r3, [pc, #356]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a58      	ldr	r2, [pc, #352]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003156:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003164:	4b53      	ldr	r3, [pc, #332]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a52      	ldr	r2, [pc, #328]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800316e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003170:	4b50      	ldr	r3, [pc, #320]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	494d      	ldr	r1, [pc, #308]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d040      	beq.n	8003210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b47      	ldr	r3, [pc, #284]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d115      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b41      	ldr	r3, [pc, #260]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e073      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b3d      	ldr	r3, [pc, #244]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e06b      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b39      	ldr	r3, [pc, #228]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4936      	ldr	r1, [pc, #216]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fe f814 	bl	800120c <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fe f810 	bl	800120c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e053      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b2d      	ldr	r3, [pc, #180]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b27      	ldr	r3, [pc, #156]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d210      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b24      	ldr	r3, [pc, #144]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 0207 	bic.w	r2, r3, #7
 8003226:	4922      	ldr	r1, [pc, #136]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b20      	ldr	r3, [pc, #128]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e032      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800324c:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4916      	ldr	r1, [pc, #88]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800326a:	4b12      	ldr	r3, [pc, #72]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	490e      	ldr	r1, [pc, #56]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800327e:	f000 f821 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 8003282:	4602      	mov	r2, r0
 8003284:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	490a      	ldr	r1, [pc, #40]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	5ccb      	ldrb	r3, [r1, r3]
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	4a09      	ldr	r2, [pc, #36]	@ (80032bc <HAL_RCC_ClockConfig+0x1cc>)
 8003298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_RCC_ClockConfig+0x1d0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd ff72 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40021000 	.word	0x40021000
 80032b8:	080043dc 	.word	0x080043dc
 80032bc:	20000000 	.word	0x20000000
 80032c0:	20000004 	.word	0x20000004

080032c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032de:	4b1e      	ldr	r3, [pc, #120]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x94>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d002      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x30>
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d003      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0x36>
 80032f2:	e027      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f4:	4b19      	ldr	r3, [pc, #100]	@ (800335c <HAL_RCC_GetSysClockFreq+0x98>)
 80032f6:	613b      	str	r3, [r7, #16]
      break;
 80032f8:	e027      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	0c9b      	lsrs	r3, r3, #18
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	4a17      	ldr	r2, [pc, #92]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003304:	5cd3      	ldrb	r3, [r2, r3]
 8003306:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d010      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003312:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x94>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	0c5b      	lsrs	r3, r3, #17
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	4a11      	ldr	r2, [pc, #68]	@ (8003364 <HAL_RCC_GetSysClockFreq+0xa0>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a0d      	ldr	r2, [pc, #52]	@ (800335c <HAL_RCC_GetSysClockFreq+0x98>)
 8003326:	fb03 f202 	mul.w	r2, r3, r2
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e004      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a0c      	ldr	r2, [pc, #48]	@ (8003368 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	613b      	str	r3, [r7, #16]
      break;
 8003342:	e002      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_RCC_GetSysClockFreq+0x98>)
 8003346:	613b      	str	r3, [r7, #16]
      break;
 8003348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800334a:	693b      	ldr	r3, [r7, #16]
}
 800334c:	4618      	mov	r0, r3
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	007a1200 	.word	0x007a1200
 8003360:	080043f4 	.word	0x080043f4
 8003364:	08004404 	.word	0x08004404
 8003368:	003d0900 	.word	0x003d0900

0800336c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003370:	4b02      	ldr	r3, [pc, #8]	@ (800337c <HAL_RCC_GetHCLKFreq+0x10>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	20000000 	.word	0x20000000

08003380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003384:	f7ff fff2 	bl	800336c <HAL_RCC_GetHCLKFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4903      	ldr	r1, [pc, #12]	@ (80033a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	080043ec 	.word	0x080043ec

080033a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033ac:	f7ff ffde 	bl	800336c <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	0adb      	lsrs	r3, r3, #11
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4903      	ldr	r1, [pc, #12]	@ (80033cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000
 80033cc:	080043ec 	.word	0x080043ec

080033d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <RCC_Delay+0x34>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <RCC_Delay+0x38>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0a5b      	lsrs	r3, r3, #9
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033ec:	bf00      	nop
  }
  while (Delay --);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	60fa      	str	r2, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f9      	bne.n	80033ec <RCC_Delay+0x1c>
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	20000000 	.word	0x20000000
 8003408:	10624dd3 	.word	0x10624dd3

0800340c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e042      	b.n	80034a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fd08 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800344e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f971 	bl	8003738 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	@ 0x28
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d175      	bne.n	80035b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_UART_Transmit+0x2c>
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e06e      	b.n	80035ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2221      	movs	r2, #33	@ 0x21
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ea:	f7fd fe8f 	bl	800120c <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	88fa      	ldrh	r2, [r7, #6]
 80034fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003504:	d108      	bne.n	8003518 <HAL_UART_Transmit+0x6c>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d104      	bne.n	8003518 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e003      	b.n	8003520 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003520:	e02e      	b.n	8003580 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	@ 0x80
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f848 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e03a      	b.n	80035ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003558:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	3302      	adds	r3, #2
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	e007      	b.n	8003572 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3301      	adds	r3, #1
 8003570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1cb      	bne.n	8003522 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2140      	movs	r1, #64	@ 0x40
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f814 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e006      	b.n	80035ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b086      	sub	sp, #24
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d2:	e03b      	b.n	800364c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035da:	d037      	beq.n	800364c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035dc:	f7fd fe16 	bl	800120c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	6a3a      	ldr	r2, [r7, #32]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d302      	bcc.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e03a      	b.n	800366c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d023      	beq.n	800364c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b80      	cmp	r3, #128	@ 0x80
 8003608:	d020      	beq.n	800364c <UART_WaitOnFlagUntilTimeout+0x8a>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b40      	cmp	r3, #64	@ 0x40
 800360e:	d01d      	beq.n	800364c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b08      	cmp	r3, #8
 800361c:	d116      	bne.n	800364c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f81d 	bl	8003674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2208      	movs	r2, #8
 800363e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e00f      	b.n	800366c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	429a      	cmp	r2, r3
 8003668:	d0b4      	beq.n	80035d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003674:	b480      	push	{r7}
 8003676:	b095      	sub	sp, #84	@ 0x54
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	330c      	adds	r3, #12
 8003682:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	330c      	adds	r3, #12
 800369a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800369c:	643a      	str	r2, [r7, #64]	@ 0x40
 800369e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e5      	bne.n	800367c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	61fb      	str	r3, [r7, #28]
   return(result);
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3314      	adds	r3, #20
 80036ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e5      	bne.n	80036b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d119      	bne.n	8003720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f023 0310 	bic.w	r3, r3, #16
 8003702:	647b      	str	r3, [r7, #68]	@ 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800370c:	61ba      	str	r2, [r7, #24]
 800370e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	6979      	ldr	r1, [r7, #20]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	e841 2300 	strex	r3, r2, [r1]
 8003718:	613b      	str	r3, [r7, #16]
   return(result);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e5      	bne.n	80036ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800372e:	bf00      	nop
 8003730:	3754      	adds	r7, #84	@ 0x54
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003772:	f023 030c 	bic.w	r3, r3, #12
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	430b      	orrs	r3, r1
 800377e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2c      	ldr	r2, [pc, #176]	@ (800384c <UART_SetConfig+0x114>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d103      	bne.n	80037a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037a0:	f7ff fe02 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	e002      	b.n	80037ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037a8:	f7ff fdea 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 80037ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009a      	lsls	r2, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	4a22      	ldr	r2, [pc, #136]	@ (8003850 <UART_SetConfig+0x118>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	0119      	lsls	r1, r3, #4
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003850 <UART_SetConfig+0x118>)
 80037e6:	fba3 0302 	umull	r0, r3, r3, r2
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2064      	movs	r0, #100	@ 0x64
 80037ee:	fb00 f303 	mul.w	r3, r0, r3
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	3332      	adds	r3, #50	@ 0x32
 80037f8:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <UART_SetConfig+0x118>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003804:	4419      	add	r1, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f2f3 	udiv	r2, r2, r3
 800381c:	4b0c      	ldr	r3, [pc, #48]	@ (8003850 <UART_SetConfig+0x118>)
 800381e:	fba3 0302 	umull	r0, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2064      	movs	r0, #100	@ 0x64
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	@ 0x32
 8003830:	4a07      	ldr	r2, [pc, #28]	@ (8003850 <UART_SetConfig+0x118>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 020f 	and.w	r2, r3, #15
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	440a      	add	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40013800 	.word	0x40013800
 8003850:	51eb851f 	.word	0x51eb851f

08003854 <siprintf>:
 8003854:	b40e      	push	{r1, r2, r3}
 8003856:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800385a:	b500      	push	{lr}
 800385c:	b09c      	sub	sp, #112	@ 0x70
 800385e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003860:	9002      	str	r0, [sp, #8]
 8003862:	9006      	str	r0, [sp, #24]
 8003864:	9107      	str	r1, [sp, #28]
 8003866:	9104      	str	r1, [sp, #16]
 8003868:	4808      	ldr	r0, [pc, #32]	@ (800388c <siprintf+0x38>)
 800386a:	4909      	ldr	r1, [pc, #36]	@ (8003890 <siprintf+0x3c>)
 800386c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003870:	9105      	str	r1, [sp, #20]
 8003872:	6800      	ldr	r0, [r0, #0]
 8003874:	a902      	add	r1, sp, #8
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	f000 f9a0 	bl	8003bbc <_svfiprintf_r>
 800387c:	2200      	movs	r2, #0
 800387e:	9b02      	ldr	r3, [sp, #8]
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	b01c      	add	sp, #112	@ 0x70
 8003884:	f85d eb04 	ldr.w	lr, [sp], #4
 8003888:	b003      	add	sp, #12
 800388a:	4770      	bx	lr
 800388c:	2000000c 	.word	0x2000000c
 8003890:	ffff0208 	.word	0xffff0208

08003894 <memset>:
 8003894:	4603      	mov	r3, r0
 8003896:	4402      	add	r2, r0
 8003898:	4293      	cmp	r3, r2
 800389a:	d100      	bne.n	800389e <memset+0xa>
 800389c:	4770      	bx	lr
 800389e:	f803 1b01 	strb.w	r1, [r3], #1
 80038a2:	e7f9      	b.n	8003898 <memset+0x4>

080038a4 <__errno>:
 80038a4:	4b01      	ldr	r3, [pc, #4]	@ (80038ac <__errno+0x8>)
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	2000000c 	.word	0x2000000c

080038b0 <__libc_init_array>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	2600      	movs	r6, #0
 80038b4:	4d0c      	ldr	r5, [pc, #48]	@ (80038e8 <__libc_init_array+0x38>)
 80038b6:	4c0d      	ldr	r4, [pc, #52]	@ (80038ec <__libc_init_array+0x3c>)
 80038b8:	1b64      	subs	r4, r4, r5
 80038ba:	10a4      	asrs	r4, r4, #2
 80038bc:	42a6      	cmp	r6, r4
 80038be:	d109      	bne.n	80038d4 <__libc_init_array+0x24>
 80038c0:	f000 fc78 	bl	80041b4 <_init>
 80038c4:	2600      	movs	r6, #0
 80038c6:	4d0a      	ldr	r5, [pc, #40]	@ (80038f0 <__libc_init_array+0x40>)
 80038c8:	4c0a      	ldr	r4, [pc, #40]	@ (80038f4 <__libc_init_array+0x44>)
 80038ca:	1b64      	subs	r4, r4, r5
 80038cc:	10a4      	asrs	r4, r4, #2
 80038ce:	42a6      	cmp	r6, r4
 80038d0:	d105      	bne.n	80038de <__libc_init_array+0x2e>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d8:	4798      	blx	r3
 80038da:	3601      	adds	r6, #1
 80038dc:	e7ee      	b.n	80038bc <__libc_init_array+0xc>
 80038de:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e2:	4798      	blx	r3
 80038e4:	3601      	adds	r6, #1
 80038e6:	e7f2      	b.n	80038ce <__libc_init_array+0x1e>
 80038e8:	08004444 	.word	0x08004444
 80038ec:	08004444 	.word	0x08004444
 80038f0:	08004444 	.word	0x08004444
 80038f4:	08004448 	.word	0x08004448

080038f8 <__retarget_lock_acquire_recursive>:
 80038f8:	4770      	bx	lr

080038fa <__retarget_lock_release_recursive>:
 80038fa:	4770      	bx	lr

080038fc <memcpy>:
 80038fc:	440a      	add	r2, r1
 80038fe:	4291      	cmp	r1, r2
 8003900:	f100 33ff 	add.w	r3, r0, #4294967295
 8003904:	d100      	bne.n	8003908 <memcpy+0xc>
 8003906:	4770      	bx	lr
 8003908:	b510      	push	{r4, lr}
 800390a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800390e:	4291      	cmp	r1, r2
 8003910:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003914:	d1f9      	bne.n	800390a <memcpy+0xe>
 8003916:	bd10      	pop	{r4, pc}

08003918 <_free_r>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	4605      	mov	r5, r0
 800391c:	2900      	cmp	r1, #0
 800391e:	d040      	beq.n	80039a2 <_free_r+0x8a>
 8003920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003924:	1f0c      	subs	r4, r1, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfb8      	it	lt
 800392a:	18e4      	addlt	r4, r4, r3
 800392c:	f000 f8de 	bl	8003aec <__malloc_lock>
 8003930:	4a1c      	ldr	r2, [pc, #112]	@ (80039a4 <_free_r+0x8c>)
 8003932:	6813      	ldr	r3, [r2, #0]
 8003934:	b933      	cbnz	r3, 8003944 <_free_r+0x2c>
 8003936:	6063      	str	r3, [r4, #4]
 8003938:	6014      	str	r4, [r2, #0]
 800393a:	4628      	mov	r0, r5
 800393c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003940:	f000 b8da 	b.w	8003af8 <__malloc_unlock>
 8003944:	42a3      	cmp	r3, r4
 8003946:	d908      	bls.n	800395a <_free_r+0x42>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	1821      	adds	r1, r4, r0
 800394c:	428b      	cmp	r3, r1
 800394e:	bf01      	itttt	eq
 8003950:	6819      	ldreq	r1, [r3, #0]
 8003952:	685b      	ldreq	r3, [r3, #4]
 8003954:	1809      	addeq	r1, r1, r0
 8003956:	6021      	streq	r1, [r4, #0]
 8003958:	e7ed      	b.n	8003936 <_free_r+0x1e>
 800395a:	461a      	mov	r2, r3
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b10b      	cbz	r3, 8003964 <_free_r+0x4c>
 8003960:	42a3      	cmp	r3, r4
 8003962:	d9fa      	bls.n	800395a <_free_r+0x42>
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	1850      	adds	r0, r2, r1
 8003968:	42a0      	cmp	r0, r4
 800396a:	d10b      	bne.n	8003984 <_free_r+0x6c>
 800396c:	6820      	ldr	r0, [r4, #0]
 800396e:	4401      	add	r1, r0
 8003970:	1850      	adds	r0, r2, r1
 8003972:	4283      	cmp	r3, r0
 8003974:	6011      	str	r1, [r2, #0]
 8003976:	d1e0      	bne.n	800393a <_free_r+0x22>
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4408      	add	r0, r1
 800397e:	6010      	str	r0, [r2, #0]
 8003980:	6053      	str	r3, [r2, #4]
 8003982:	e7da      	b.n	800393a <_free_r+0x22>
 8003984:	d902      	bls.n	800398c <_free_r+0x74>
 8003986:	230c      	movs	r3, #12
 8003988:	602b      	str	r3, [r5, #0]
 800398a:	e7d6      	b.n	800393a <_free_r+0x22>
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	1821      	adds	r1, r4, r0
 8003990:	428b      	cmp	r3, r1
 8003992:	bf01      	itttt	eq
 8003994:	6819      	ldreq	r1, [r3, #0]
 8003996:	685b      	ldreq	r3, [r3, #4]
 8003998:	1809      	addeq	r1, r1, r0
 800399a:	6021      	streq	r1, [r4, #0]
 800399c:	6063      	str	r3, [r4, #4]
 800399e:	6054      	str	r4, [r2, #4]
 80039a0:	e7cb      	b.n	800393a <_free_r+0x22>
 80039a2:	bd38      	pop	{r3, r4, r5, pc}
 80039a4:	200003d8 	.word	0x200003d8

080039a8 <sbrk_aligned>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4e0f      	ldr	r6, [pc, #60]	@ (80039e8 <sbrk_aligned+0x40>)
 80039ac:	460c      	mov	r4, r1
 80039ae:	6831      	ldr	r1, [r6, #0]
 80039b0:	4605      	mov	r5, r0
 80039b2:	b911      	cbnz	r1, 80039ba <sbrk_aligned+0x12>
 80039b4:	f000 fbaa 	bl	800410c <_sbrk_r>
 80039b8:	6030      	str	r0, [r6, #0]
 80039ba:	4621      	mov	r1, r4
 80039bc:	4628      	mov	r0, r5
 80039be:	f000 fba5 	bl	800410c <_sbrk_r>
 80039c2:	1c43      	adds	r3, r0, #1
 80039c4:	d103      	bne.n	80039ce <sbrk_aligned+0x26>
 80039c6:	f04f 34ff 	mov.w	r4, #4294967295
 80039ca:	4620      	mov	r0, r4
 80039cc:	bd70      	pop	{r4, r5, r6, pc}
 80039ce:	1cc4      	adds	r4, r0, #3
 80039d0:	f024 0403 	bic.w	r4, r4, #3
 80039d4:	42a0      	cmp	r0, r4
 80039d6:	d0f8      	beq.n	80039ca <sbrk_aligned+0x22>
 80039d8:	1a21      	subs	r1, r4, r0
 80039da:	4628      	mov	r0, r5
 80039dc:	f000 fb96 	bl	800410c <_sbrk_r>
 80039e0:	3001      	adds	r0, #1
 80039e2:	d1f2      	bne.n	80039ca <sbrk_aligned+0x22>
 80039e4:	e7ef      	b.n	80039c6 <sbrk_aligned+0x1e>
 80039e6:	bf00      	nop
 80039e8:	200003d4 	.word	0x200003d4

080039ec <_malloc_r>:
 80039ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f0:	1ccd      	adds	r5, r1, #3
 80039f2:	f025 0503 	bic.w	r5, r5, #3
 80039f6:	3508      	adds	r5, #8
 80039f8:	2d0c      	cmp	r5, #12
 80039fa:	bf38      	it	cc
 80039fc:	250c      	movcc	r5, #12
 80039fe:	2d00      	cmp	r5, #0
 8003a00:	4606      	mov	r6, r0
 8003a02:	db01      	blt.n	8003a08 <_malloc_r+0x1c>
 8003a04:	42a9      	cmp	r1, r5
 8003a06:	d904      	bls.n	8003a12 <_malloc_r+0x26>
 8003a08:	230c      	movs	r3, #12
 8003a0a:	6033      	str	r3, [r6, #0]
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ae8 <_malloc_r+0xfc>
 8003a16:	f000 f869 	bl	8003aec <__malloc_lock>
 8003a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a1e:	461c      	mov	r4, r3
 8003a20:	bb44      	cbnz	r4, 8003a74 <_malloc_r+0x88>
 8003a22:	4629      	mov	r1, r5
 8003a24:	4630      	mov	r0, r6
 8003a26:	f7ff ffbf 	bl	80039a8 <sbrk_aligned>
 8003a2a:	1c43      	adds	r3, r0, #1
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	d158      	bne.n	8003ae2 <_malloc_r+0xf6>
 8003a30:	f8d8 4000 	ldr.w	r4, [r8]
 8003a34:	4627      	mov	r7, r4
 8003a36:	2f00      	cmp	r7, #0
 8003a38:	d143      	bne.n	8003ac2 <_malloc_r+0xd6>
 8003a3a:	2c00      	cmp	r4, #0
 8003a3c:	d04b      	beq.n	8003ad6 <_malloc_r+0xea>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	4639      	mov	r1, r7
 8003a42:	4630      	mov	r0, r6
 8003a44:	eb04 0903 	add.w	r9, r4, r3
 8003a48:	f000 fb60 	bl	800410c <_sbrk_r>
 8003a4c:	4581      	cmp	r9, r0
 8003a4e:	d142      	bne.n	8003ad6 <_malloc_r+0xea>
 8003a50:	6821      	ldr	r1, [r4, #0]
 8003a52:	4630      	mov	r0, r6
 8003a54:	1a6d      	subs	r5, r5, r1
 8003a56:	4629      	mov	r1, r5
 8003a58:	f7ff ffa6 	bl	80039a8 <sbrk_aligned>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d03a      	beq.n	8003ad6 <_malloc_r+0xea>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	442b      	add	r3, r5
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	f8d8 3000 	ldr.w	r3, [r8]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	bb62      	cbnz	r2, 8003ac8 <_malloc_r+0xdc>
 8003a6e:	f8c8 7000 	str.w	r7, [r8]
 8003a72:	e00f      	b.n	8003a94 <_malloc_r+0xa8>
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	1b52      	subs	r2, r2, r5
 8003a78:	d420      	bmi.n	8003abc <_malloc_r+0xd0>
 8003a7a:	2a0b      	cmp	r2, #11
 8003a7c:	d917      	bls.n	8003aae <_malloc_r+0xc2>
 8003a7e:	1961      	adds	r1, r4, r5
 8003a80:	42a3      	cmp	r3, r4
 8003a82:	6025      	str	r5, [r4, #0]
 8003a84:	bf18      	it	ne
 8003a86:	6059      	strne	r1, [r3, #4]
 8003a88:	6863      	ldr	r3, [r4, #4]
 8003a8a:	bf08      	it	eq
 8003a8c:	f8c8 1000 	streq.w	r1, [r8]
 8003a90:	5162      	str	r2, [r4, r5]
 8003a92:	604b      	str	r3, [r1, #4]
 8003a94:	4630      	mov	r0, r6
 8003a96:	f000 f82f 	bl	8003af8 <__malloc_unlock>
 8003a9a:	f104 000b 	add.w	r0, r4, #11
 8003a9e:	1d23      	adds	r3, r4, #4
 8003aa0:	f020 0007 	bic.w	r0, r0, #7
 8003aa4:	1ac2      	subs	r2, r0, r3
 8003aa6:	bf1c      	itt	ne
 8003aa8:	1a1b      	subne	r3, r3, r0
 8003aaa:	50a3      	strne	r3, [r4, r2]
 8003aac:	e7af      	b.n	8003a0e <_malloc_r+0x22>
 8003aae:	6862      	ldr	r2, [r4, #4]
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	bf0c      	ite	eq
 8003ab4:	f8c8 2000 	streq.w	r2, [r8]
 8003ab8:	605a      	strne	r2, [r3, #4]
 8003aba:	e7eb      	b.n	8003a94 <_malloc_r+0xa8>
 8003abc:	4623      	mov	r3, r4
 8003abe:	6864      	ldr	r4, [r4, #4]
 8003ac0:	e7ae      	b.n	8003a20 <_malloc_r+0x34>
 8003ac2:	463c      	mov	r4, r7
 8003ac4:	687f      	ldr	r7, [r7, #4]
 8003ac6:	e7b6      	b.n	8003a36 <_malloc_r+0x4a>
 8003ac8:	461a      	mov	r2, r3
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	d1fb      	bne.n	8003ac8 <_malloc_r+0xdc>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	6053      	str	r3, [r2, #4]
 8003ad4:	e7de      	b.n	8003a94 <_malloc_r+0xa8>
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	4630      	mov	r0, r6
 8003ada:	6033      	str	r3, [r6, #0]
 8003adc:	f000 f80c 	bl	8003af8 <__malloc_unlock>
 8003ae0:	e794      	b.n	8003a0c <_malloc_r+0x20>
 8003ae2:	6005      	str	r5, [r0, #0]
 8003ae4:	e7d6      	b.n	8003a94 <_malloc_r+0xa8>
 8003ae6:	bf00      	nop
 8003ae8:	200003d8 	.word	0x200003d8

08003aec <__malloc_lock>:
 8003aec:	4801      	ldr	r0, [pc, #4]	@ (8003af4 <__malloc_lock+0x8>)
 8003aee:	f7ff bf03 	b.w	80038f8 <__retarget_lock_acquire_recursive>
 8003af2:	bf00      	nop
 8003af4:	200003d0 	.word	0x200003d0

08003af8 <__malloc_unlock>:
 8003af8:	4801      	ldr	r0, [pc, #4]	@ (8003b00 <__malloc_unlock+0x8>)
 8003afa:	f7ff befe 	b.w	80038fa <__retarget_lock_release_recursive>
 8003afe:	bf00      	nop
 8003b00:	200003d0 	.word	0x200003d0

08003b04 <__ssputs_r>:
 8003b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b08:	461f      	mov	r7, r3
 8003b0a:	688e      	ldr	r6, [r1, #8]
 8003b0c:	4682      	mov	sl, r0
 8003b0e:	42be      	cmp	r6, r7
 8003b10:	460c      	mov	r4, r1
 8003b12:	4690      	mov	r8, r2
 8003b14:	680b      	ldr	r3, [r1, #0]
 8003b16:	d82d      	bhi.n	8003b74 <__ssputs_r+0x70>
 8003b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b20:	d026      	beq.n	8003b70 <__ssputs_r+0x6c>
 8003b22:	6965      	ldr	r5, [r4, #20]
 8003b24:	6909      	ldr	r1, [r1, #16]
 8003b26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b2a:	eba3 0901 	sub.w	r9, r3, r1
 8003b2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b32:	1c7b      	adds	r3, r7, #1
 8003b34:	444b      	add	r3, r9
 8003b36:	106d      	asrs	r5, r5, #1
 8003b38:	429d      	cmp	r5, r3
 8003b3a:	bf38      	it	cc
 8003b3c:	461d      	movcc	r5, r3
 8003b3e:	0553      	lsls	r3, r2, #21
 8003b40:	d527      	bpl.n	8003b92 <__ssputs_r+0x8e>
 8003b42:	4629      	mov	r1, r5
 8003b44:	f7ff ff52 	bl	80039ec <_malloc_r>
 8003b48:	4606      	mov	r6, r0
 8003b4a:	b360      	cbz	r0, 8003ba6 <__ssputs_r+0xa2>
 8003b4c:	464a      	mov	r2, r9
 8003b4e:	6921      	ldr	r1, [r4, #16]
 8003b50:	f7ff fed4 	bl	80038fc <memcpy>
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b5e:	81a3      	strh	r3, [r4, #12]
 8003b60:	6126      	str	r6, [r4, #16]
 8003b62:	444e      	add	r6, r9
 8003b64:	6026      	str	r6, [r4, #0]
 8003b66:	463e      	mov	r6, r7
 8003b68:	6165      	str	r5, [r4, #20]
 8003b6a:	eba5 0509 	sub.w	r5, r5, r9
 8003b6e:	60a5      	str	r5, [r4, #8]
 8003b70:	42be      	cmp	r6, r7
 8003b72:	d900      	bls.n	8003b76 <__ssputs_r+0x72>
 8003b74:	463e      	mov	r6, r7
 8003b76:	4632      	mov	r2, r6
 8003b78:	4641      	mov	r1, r8
 8003b7a:	6820      	ldr	r0, [r4, #0]
 8003b7c:	f000 faac 	bl	80040d8 <memmove>
 8003b80:	2000      	movs	r0, #0
 8003b82:	68a3      	ldr	r3, [r4, #8]
 8003b84:	1b9b      	subs	r3, r3, r6
 8003b86:	60a3      	str	r3, [r4, #8]
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	4433      	add	r3, r6
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b92:	462a      	mov	r2, r5
 8003b94:	f000 fad8 	bl	8004148 <_realloc_r>
 8003b98:	4606      	mov	r6, r0
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d1e0      	bne.n	8003b60 <__ssputs_r+0x5c>
 8003b9e:	4650      	mov	r0, sl
 8003ba0:	6921      	ldr	r1, [r4, #16]
 8003ba2:	f7ff feb9 	bl	8003918 <_free_r>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	f8ca 3000 	str.w	r3, [sl]
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb6:	81a3      	strh	r3, [r4, #12]
 8003bb8:	e7e9      	b.n	8003b8e <__ssputs_r+0x8a>
	...

08003bbc <_svfiprintf_r>:
 8003bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc0:	4698      	mov	r8, r3
 8003bc2:	898b      	ldrh	r3, [r1, #12]
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	460d      	mov	r5, r1
 8003bca:	4614      	mov	r4, r2
 8003bcc:	b09d      	sub	sp, #116	@ 0x74
 8003bce:	d510      	bpl.n	8003bf2 <_svfiprintf_r+0x36>
 8003bd0:	690b      	ldr	r3, [r1, #16]
 8003bd2:	b973      	cbnz	r3, 8003bf2 <_svfiprintf_r+0x36>
 8003bd4:	2140      	movs	r1, #64	@ 0x40
 8003bd6:	f7ff ff09 	bl	80039ec <_malloc_r>
 8003bda:	6028      	str	r0, [r5, #0]
 8003bdc:	6128      	str	r0, [r5, #16]
 8003bde:	b930      	cbnz	r0, 8003bee <_svfiprintf_r+0x32>
 8003be0:	230c      	movs	r3, #12
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	b01d      	add	sp, #116	@ 0x74
 8003bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bee:	2340      	movs	r3, #64	@ 0x40
 8003bf0:	616b      	str	r3, [r5, #20]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bfc:	2330      	movs	r3, #48	@ 0x30
 8003bfe:	f04f 0901 	mov.w	r9, #1
 8003c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003da0 <_svfiprintf_r+0x1e4>
 8003c0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c0e:	4623      	mov	r3, r4
 8003c10:	469a      	mov	sl, r3
 8003c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c16:	b10a      	cbz	r2, 8003c1c <_svfiprintf_r+0x60>
 8003c18:	2a25      	cmp	r2, #37	@ 0x25
 8003c1a:	d1f9      	bne.n	8003c10 <_svfiprintf_r+0x54>
 8003c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c20:	d00b      	beq.n	8003c3a <_svfiprintf_r+0x7e>
 8003c22:	465b      	mov	r3, fp
 8003c24:	4622      	mov	r2, r4
 8003c26:	4629      	mov	r1, r5
 8003c28:	4638      	mov	r0, r7
 8003c2a:	f7ff ff6b 	bl	8003b04 <__ssputs_r>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	f000 80a7 	beq.w	8003d82 <_svfiprintf_r+0x1c6>
 8003c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c36:	445a      	add	r2, fp
 8003c38:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 809f 	beq.w	8003d82 <_svfiprintf_r+0x1c6>
 8003c44:	2300      	movs	r3, #0
 8003c46:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c4e:	f10a 0a01 	add.w	sl, sl, #1
 8003c52:	9304      	str	r3, [sp, #16]
 8003c54:	9307      	str	r3, [sp, #28]
 8003c56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c5c:	4654      	mov	r4, sl
 8003c5e:	2205      	movs	r2, #5
 8003c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c64:	484e      	ldr	r0, [pc, #312]	@ (8003da0 <_svfiprintf_r+0x1e4>)
 8003c66:	f000 fa61 	bl	800412c <memchr>
 8003c6a:	9a04      	ldr	r2, [sp, #16]
 8003c6c:	b9d8      	cbnz	r0, 8003ca6 <_svfiprintf_r+0xea>
 8003c6e:	06d0      	lsls	r0, r2, #27
 8003c70:	bf44      	itt	mi
 8003c72:	2320      	movmi	r3, #32
 8003c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c78:	0711      	lsls	r1, r2, #28
 8003c7a:	bf44      	itt	mi
 8003c7c:	232b      	movmi	r3, #43	@ 0x2b
 8003c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c82:	f89a 3000 	ldrb.w	r3, [sl]
 8003c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c88:	d015      	beq.n	8003cb6 <_svfiprintf_r+0xfa>
 8003c8a:	4654      	mov	r4, sl
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f04f 0c0a 	mov.w	ip, #10
 8003c92:	9a07      	ldr	r2, [sp, #28]
 8003c94:	4621      	mov	r1, r4
 8003c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c9a:	3b30      	subs	r3, #48	@ 0x30
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d94b      	bls.n	8003d38 <_svfiprintf_r+0x17c>
 8003ca0:	b1b0      	cbz	r0, 8003cd0 <_svfiprintf_r+0x114>
 8003ca2:	9207      	str	r2, [sp, #28]
 8003ca4:	e014      	b.n	8003cd0 <_svfiprintf_r+0x114>
 8003ca6:	eba0 0308 	sub.w	r3, r0, r8
 8003caa:	fa09 f303 	lsl.w	r3, r9, r3
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	46a2      	mov	sl, r4
 8003cb2:	9304      	str	r3, [sp, #16]
 8003cb4:	e7d2      	b.n	8003c5c <_svfiprintf_r+0xa0>
 8003cb6:	9b03      	ldr	r3, [sp, #12]
 8003cb8:	1d19      	adds	r1, r3, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	9103      	str	r1, [sp, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bfbb      	ittet	lt
 8003cc2:	425b      	neglt	r3, r3
 8003cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8003cc8:	9307      	strge	r3, [sp, #28]
 8003cca:	9307      	strlt	r3, [sp, #28]
 8003ccc:	bfb8      	it	lt
 8003cce:	9204      	strlt	r2, [sp, #16]
 8003cd0:	7823      	ldrb	r3, [r4, #0]
 8003cd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cd4:	d10a      	bne.n	8003cec <_svfiprintf_r+0x130>
 8003cd6:	7863      	ldrb	r3, [r4, #1]
 8003cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cda:	d132      	bne.n	8003d42 <_svfiprintf_r+0x186>
 8003cdc:	9b03      	ldr	r3, [sp, #12]
 8003cde:	3402      	adds	r4, #2
 8003ce0:	1d1a      	adds	r2, r3, #4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	9203      	str	r2, [sp, #12]
 8003ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cea:	9305      	str	r3, [sp, #20]
 8003cec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003da4 <_svfiprintf_r+0x1e8>
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	4650      	mov	r0, sl
 8003cf4:	7821      	ldrb	r1, [r4, #0]
 8003cf6:	f000 fa19 	bl	800412c <memchr>
 8003cfa:	b138      	cbz	r0, 8003d0c <_svfiprintf_r+0x150>
 8003cfc:	2240      	movs	r2, #64	@ 0x40
 8003cfe:	9b04      	ldr	r3, [sp, #16]
 8003d00:	eba0 000a 	sub.w	r0, r0, sl
 8003d04:	4082      	lsls	r2, r0
 8003d06:	4313      	orrs	r3, r2
 8003d08:	3401      	adds	r4, #1
 8003d0a:	9304      	str	r3, [sp, #16]
 8003d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d10:	2206      	movs	r2, #6
 8003d12:	4825      	ldr	r0, [pc, #148]	@ (8003da8 <_svfiprintf_r+0x1ec>)
 8003d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d18:	f000 fa08 	bl	800412c <memchr>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d036      	beq.n	8003d8e <_svfiprintf_r+0x1d2>
 8003d20:	4b22      	ldr	r3, [pc, #136]	@ (8003dac <_svfiprintf_r+0x1f0>)
 8003d22:	bb1b      	cbnz	r3, 8003d6c <_svfiprintf_r+0x1b0>
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	3307      	adds	r3, #7
 8003d28:	f023 0307 	bic.w	r3, r3, #7
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	9303      	str	r3, [sp, #12]
 8003d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d32:	4433      	add	r3, r6
 8003d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d36:	e76a      	b.n	8003c0e <_svfiprintf_r+0x52>
 8003d38:	460c      	mov	r4, r1
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d40:	e7a8      	b.n	8003c94 <_svfiprintf_r+0xd8>
 8003d42:	2300      	movs	r3, #0
 8003d44:	f04f 0c0a 	mov.w	ip, #10
 8003d48:	4619      	mov	r1, r3
 8003d4a:	3401      	adds	r4, #1
 8003d4c:	9305      	str	r3, [sp, #20]
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d54:	3a30      	subs	r2, #48	@ 0x30
 8003d56:	2a09      	cmp	r2, #9
 8003d58:	d903      	bls.n	8003d62 <_svfiprintf_r+0x1a6>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0c6      	beq.n	8003cec <_svfiprintf_r+0x130>
 8003d5e:	9105      	str	r1, [sp, #20]
 8003d60:	e7c4      	b.n	8003cec <_svfiprintf_r+0x130>
 8003d62:	4604      	mov	r4, r0
 8003d64:	2301      	movs	r3, #1
 8003d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d6a:	e7f0      	b.n	8003d4e <_svfiprintf_r+0x192>
 8003d6c:	ab03      	add	r3, sp, #12
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	462a      	mov	r2, r5
 8003d72:	4638      	mov	r0, r7
 8003d74:	4b0e      	ldr	r3, [pc, #56]	@ (8003db0 <_svfiprintf_r+0x1f4>)
 8003d76:	a904      	add	r1, sp, #16
 8003d78:	f3af 8000 	nop.w
 8003d7c:	1c42      	adds	r2, r0, #1
 8003d7e:	4606      	mov	r6, r0
 8003d80:	d1d6      	bne.n	8003d30 <_svfiprintf_r+0x174>
 8003d82:	89ab      	ldrh	r3, [r5, #12]
 8003d84:	065b      	lsls	r3, r3, #25
 8003d86:	f53f af2d 	bmi.w	8003be4 <_svfiprintf_r+0x28>
 8003d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d8c:	e72c      	b.n	8003be8 <_svfiprintf_r+0x2c>
 8003d8e:	ab03      	add	r3, sp, #12
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	462a      	mov	r2, r5
 8003d94:	4638      	mov	r0, r7
 8003d96:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <_svfiprintf_r+0x1f4>)
 8003d98:	a904      	add	r1, sp, #16
 8003d9a:	f000 f87d 	bl	8003e98 <_printf_i>
 8003d9e:	e7ed      	b.n	8003d7c <_svfiprintf_r+0x1c0>
 8003da0:	08004406 	.word	0x08004406
 8003da4:	0800440c 	.word	0x0800440c
 8003da8:	08004410 	.word	0x08004410
 8003dac:	00000000 	.word	0x00000000
 8003db0:	08003b05 	.word	0x08003b05

08003db4 <_printf_common>:
 8003db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db8:	4616      	mov	r6, r2
 8003dba:	4698      	mov	r8, r3
 8003dbc:	688a      	ldr	r2, [r1, #8]
 8003dbe:	690b      	ldr	r3, [r1, #16]
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	bfb8      	it	lt
 8003dc6:	4613      	movlt	r3, r2
 8003dc8:	6033      	str	r3, [r6, #0]
 8003dca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dce:	460c      	mov	r4, r1
 8003dd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dd4:	b10a      	cbz	r2, 8003dda <_printf_common+0x26>
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	6033      	str	r3, [r6, #0]
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	0699      	lsls	r1, r3, #26
 8003dde:	bf42      	ittt	mi
 8003de0:	6833      	ldrmi	r3, [r6, #0]
 8003de2:	3302      	addmi	r3, #2
 8003de4:	6033      	strmi	r3, [r6, #0]
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	f015 0506 	ands.w	r5, r5, #6
 8003dec:	d106      	bne.n	8003dfc <_printf_common+0x48>
 8003dee:	f104 0a19 	add.w	sl, r4, #25
 8003df2:	68e3      	ldr	r3, [r4, #12]
 8003df4:	6832      	ldr	r2, [r6, #0]
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	42ab      	cmp	r3, r5
 8003dfa:	dc2b      	bgt.n	8003e54 <_printf_common+0xa0>
 8003dfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e00:	6822      	ldr	r2, [r4, #0]
 8003e02:	3b00      	subs	r3, #0
 8003e04:	bf18      	it	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	0692      	lsls	r2, r2, #26
 8003e0a:	d430      	bmi.n	8003e6e <_printf_common+0xba>
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	4638      	mov	r0, r7
 8003e10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e14:	47c8      	blx	r9
 8003e16:	3001      	adds	r0, #1
 8003e18:	d023      	beq.n	8003e62 <_printf_common+0xae>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	6922      	ldr	r2, [r4, #16]
 8003e1e:	f003 0306 	and.w	r3, r3, #6
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	bf14      	ite	ne
 8003e26:	2500      	movne	r5, #0
 8003e28:	6833      	ldreq	r3, [r6, #0]
 8003e2a:	f04f 0600 	mov.w	r6, #0
 8003e2e:	bf08      	it	eq
 8003e30:	68e5      	ldreq	r5, [r4, #12]
 8003e32:	f104 041a 	add.w	r4, r4, #26
 8003e36:	bf08      	it	eq
 8003e38:	1aed      	subeq	r5, r5, r3
 8003e3a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e3e:	bf08      	it	eq
 8003e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e44:	4293      	cmp	r3, r2
 8003e46:	bfc4      	itt	gt
 8003e48:	1a9b      	subgt	r3, r3, r2
 8003e4a:	18ed      	addgt	r5, r5, r3
 8003e4c:	42b5      	cmp	r5, r6
 8003e4e:	d11a      	bne.n	8003e86 <_printf_common+0xd2>
 8003e50:	2000      	movs	r0, #0
 8003e52:	e008      	b.n	8003e66 <_printf_common+0xb2>
 8003e54:	2301      	movs	r3, #1
 8003e56:	4652      	mov	r2, sl
 8003e58:	4641      	mov	r1, r8
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	47c8      	blx	r9
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d103      	bne.n	8003e6a <_printf_common+0xb6>
 8003e62:	f04f 30ff 	mov.w	r0, #4294967295
 8003e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6a:	3501      	adds	r5, #1
 8003e6c:	e7c1      	b.n	8003df2 <_printf_common+0x3e>
 8003e6e:	2030      	movs	r0, #48	@ 0x30
 8003e70:	18e1      	adds	r1, r4, r3
 8003e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e7c:	4422      	add	r2, r4
 8003e7e:	3302      	adds	r3, #2
 8003e80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e84:	e7c2      	b.n	8003e0c <_printf_common+0x58>
 8003e86:	2301      	movs	r3, #1
 8003e88:	4622      	mov	r2, r4
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	4638      	mov	r0, r7
 8003e8e:	47c8      	blx	r9
 8003e90:	3001      	adds	r0, #1
 8003e92:	d0e6      	beq.n	8003e62 <_printf_common+0xae>
 8003e94:	3601      	adds	r6, #1
 8003e96:	e7d9      	b.n	8003e4c <_printf_common+0x98>

08003e98 <_printf_i>:
 8003e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e9c:	7e0f      	ldrb	r7, [r1, #24]
 8003e9e:	4691      	mov	r9, r2
 8003ea0:	2f78      	cmp	r7, #120	@ 0x78
 8003ea2:	4680      	mov	r8, r0
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	469a      	mov	sl, r3
 8003ea8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eae:	d807      	bhi.n	8003ec0 <_printf_i+0x28>
 8003eb0:	2f62      	cmp	r7, #98	@ 0x62
 8003eb2:	d80a      	bhi.n	8003eca <_printf_i+0x32>
 8003eb4:	2f00      	cmp	r7, #0
 8003eb6:	f000 80d3 	beq.w	8004060 <_printf_i+0x1c8>
 8003eba:	2f58      	cmp	r7, #88	@ 0x58
 8003ebc:	f000 80ba 	beq.w	8004034 <_printf_i+0x19c>
 8003ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ec8:	e03a      	b.n	8003f40 <_printf_i+0xa8>
 8003eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ece:	2b15      	cmp	r3, #21
 8003ed0:	d8f6      	bhi.n	8003ec0 <_printf_i+0x28>
 8003ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ed8 <_printf_i+0x40>)
 8003ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ed8:	08003f31 	.word	0x08003f31
 8003edc:	08003f45 	.word	0x08003f45
 8003ee0:	08003ec1 	.word	0x08003ec1
 8003ee4:	08003ec1 	.word	0x08003ec1
 8003ee8:	08003ec1 	.word	0x08003ec1
 8003eec:	08003ec1 	.word	0x08003ec1
 8003ef0:	08003f45 	.word	0x08003f45
 8003ef4:	08003ec1 	.word	0x08003ec1
 8003ef8:	08003ec1 	.word	0x08003ec1
 8003efc:	08003ec1 	.word	0x08003ec1
 8003f00:	08003ec1 	.word	0x08003ec1
 8003f04:	08004047 	.word	0x08004047
 8003f08:	08003f6f 	.word	0x08003f6f
 8003f0c:	08004001 	.word	0x08004001
 8003f10:	08003ec1 	.word	0x08003ec1
 8003f14:	08003ec1 	.word	0x08003ec1
 8003f18:	08004069 	.word	0x08004069
 8003f1c:	08003ec1 	.word	0x08003ec1
 8003f20:	08003f6f 	.word	0x08003f6f
 8003f24:	08003ec1 	.word	0x08003ec1
 8003f28:	08003ec1 	.word	0x08003ec1
 8003f2c:	08004009 	.word	0x08004009
 8003f30:	6833      	ldr	r3, [r6, #0]
 8003f32:	1d1a      	adds	r2, r3, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6032      	str	r2, [r6, #0]
 8003f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f40:	2301      	movs	r3, #1
 8003f42:	e09e      	b.n	8004082 <_printf_i+0x1ea>
 8003f44:	6833      	ldr	r3, [r6, #0]
 8003f46:	6820      	ldr	r0, [r4, #0]
 8003f48:	1d19      	adds	r1, r3, #4
 8003f4a:	6031      	str	r1, [r6, #0]
 8003f4c:	0606      	lsls	r6, r0, #24
 8003f4e:	d501      	bpl.n	8003f54 <_printf_i+0xbc>
 8003f50:	681d      	ldr	r5, [r3, #0]
 8003f52:	e003      	b.n	8003f5c <_printf_i+0xc4>
 8003f54:	0645      	lsls	r5, r0, #25
 8003f56:	d5fb      	bpl.n	8003f50 <_printf_i+0xb8>
 8003f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f5c:	2d00      	cmp	r5, #0
 8003f5e:	da03      	bge.n	8003f68 <_printf_i+0xd0>
 8003f60:	232d      	movs	r3, #45	@ 0x2d
 8003f62:	426d      	negs	r5, r5
 8003f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f68:	230a      	movs	r3, #10
 8003f6a:	4859      	ldr	r0, [pc, #356]	@ (80040d0 <_printf_i+0x238>)
 8003f6c:	e011      	b.n	8003f92 <_printf_i+0xfa>
 8003f6e:	6821      	ldr	r1, [r4, #0]
 8003f70:	6833      	ldr	r3, [r6, #0]
 8003f72:	0608      	lsls	r0, r1, #24
 8003f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f78:	d402      	bmi.n	8003f80 <_printf_i+0xe8>
 8003f7a:	0649      	lsls	r1, r1, #25
 8003f7c:	bf48      	it	mi
 8003f7e:	b2ad      	uxthmi	r5, r5
 8003f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f82:	6033      	str	r3, [r6, #0]
 8003f84:	bf14      	ite	ne
 8003f86:	230a      	movne	r3, #10
 8003f88:	2308      	moveq	r3, #8
 8003f8a:	4851      	ldr	r0, [pc, #324]	@ (80040d0 <_printf_i+0x238>)
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f92:	6866      	ldr	r6, [r4, #4]
 8003f94:	2e00      	cmp	r6, #0
 8003f96:	bfa8      	it	ge
 8003f98:	6821      	ldrge	r1, [r4, #0]
 8003f9a:	60a6      	str	r6, [r4, #8]
 8003f9c:	bfa4      	itt	ge
 8003f9e:	f021 0104 	bicge.w	r1, r1, #4
 8003fa2:	6021      	strge	r1, [r4, #0]
 8003fa4:	b90d      	cbnz	r5, 8003faa <_printf_i+0x112>
 8003fa6:	2e00      	cmp	r6, #0
 8003fa8:	d04b      	beq.n	8004042 <_printf_i+0x1aa>
 8003faa:	4616      	mov	r6, r2
 8003fac:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fb0:	fb03 5711 	mls	r7, r3, r1, r5
 8003fb4:	5dc7      	ldrb	r7, [r0, r7]
 8003fb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fba:	462f      	mov	r7, r5
 8003fbc:	42bb      	cmp	r3, r7
 8003fbe:	460d      	mov	r5, r1
 8003fc0:	d9f4      	bls.n	8003fac <_printf_i+0x114>
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d10b      	bne.n	8003fde <_printf_i+0x146>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	07df      	lsls	r7, r3, #31
 8003fca:	d508      	bpl.n	8003fde <_printf_i+0x146>
 8003fcc:	6923      	ldr	r3, [r4, #16]
 8003fce:	6861      	ldr	r1, [r4, #4]
 8003fd0:	4299      	cmp	r1, r3
 8003fd2:	bfde      	ittt	le
 8003fd4:	2330      	movle	r3, #48	@ 0x30
 8003fd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fde:	1b92      	subs	r2, r2, r6
 8003fe0:	6122      	str	r2, [r4, #16]
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	f8cd a000 	str.w	sl, [sp]
 8003fec:	aa03      	add	r2, sp, #12
 8003fee:	f7ff fee1 	bl	8003db4 <_printf_common>
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d14a      	bne.n	800408c <_printf_i+0x1f4>
 8003ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffa:	b004      	add	sp, #16
 8003ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	f043 0320 	orr.w	r3, r3, #32
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	2778      	movs	r7, #120	@ 0x78
 800400a:	4832      	ldr	r0, [pc, #200]	@ (80040d4 <_printf_i+0x23c>)
 800400c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	6831      	ldr	r1, [r6, #0]
 8004014:	061f      	lsls	r7, r3, #24
 8004016:	f851 5b04 	ldr.w	r5, [r1], #4
 800401a:	d402      	bmi.n	8004022 <_printf_i+0x18a>
 800401c:	065f      	lsls	r7, r3, #25
 800401e:	bf48      	it	mi
 8004020:	b2ad      	uxthmi	r5, r5
 8004022:	6031      	str	r1, [r6, #0]
 8004024:	07d9      	lsls	r1, r3, #31
 8004026:	bf44      	itt	mi
 8004028:	f043 0320 	orrmi.w	r3, r3, #32
 800402c:	6023      	strmi	r3, [r4, #0]
 800402e:	b11d      	cbz	r5, 8004038 <_printf_i+0x1a0>
 8004030:	2310      	movs	r3, #16
 8004032:	e7ab      	b.n	8003f8c <_printf_i+0xf4>
 8004034:	4826      	ldr	r0, [pc, #152]	@ (80040d0 <_printf_i+0x238>)
 8004036:	e7e9      	b.n	800400c <_printf_i+0x174>
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	f023 0320 	bic.w	r3, r3, #32
 800403e:	6023      	str	r3, [r4, #0]
 8004040:	e7f6      	b.n	8004030 <_printf_i+0x198>
 8004042:	4616      	mov	r6, r2
 8004044:	e7bd      	b.n	8003fc2 <_printf_i+0x12a>
 8004046:	6833      	ldr	r3, [r6, #0]
 8004048:	6825      	ldr	r5, [r4, #0]
 800404a:	1d18      	adds	r0, r3, #4
 800404c:	6961      	ldr	r1, [r4, #20]
 800404e:	6030      	str	r0, [r6, #0]
 8004050:	062e      	lsls	r6, r5, #24
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	d501      	bpl.n	800405a <_printf_i+0x1c2>
 8004056:	6019      	str	r1, [r3, #0]
 8004058:	e002      	b.n	8004060 <_printf_i+0x1c8>
 800405a:	0668      	lsls	r0, r5, #25
 800405c:	d5fb      	bpl.n	8004056 <_printf_i+0x1be>
 800405e:	8019      	strh	r1, [r3, #0]
 8004060:	2300      	movs	r3, #0
 8004062:	4616      	mov	r6, r2
 8004064:	6123      	str	r3, [r4, #16]
 8004066:	e7bc      	b.n	8003fe2 <_printf_i+0x14a>
 8004068:	6833      	ldr	r3, [r6, #0]
 800406a:	2100      	movs	r1, #0
 800406c:	1d1a      	adds	r2, r3, #4
 800406e:	6032      	str	r2, [r6, #0]
 8004070:	681e      	ldr	r6, [r3, #0]
 8004072:	6862      	ldr	r2, [r4, #4]
 8004074:	4630      	mov	r0, r6
 8004076:	f000 f859 	bl	800412c <memchr>
 800407a:	b108      	cbz	r0, 8004080 <_printf_i+0x1e8>
 800407c:	1b80      	subs	r0, r0, r6
 800407e:	6060      	str	r0, [r4, #4]
 8004080:	6863      	ldr	r3, [r4, #4]
 8004082:	6123      	str	r3, [r4, #16]
 8004084:	2300      	movs	r3, #0
 8004086:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800408a:	e7aa      	b.n	8003fe2 <_printf_i+0x14a>
 800408c:	4632      	mov	r2, r6
 800408e:	4649      	mov	r1, r9
 8004090:	4640      	mov	r0, r8
 8004092:	6923      	ldr	r3, [r4, #16]
 8004094:	47d0      	blx	sl
 8004096:	3001      	adds	r0, #1
 8004098:	d0ad      	beq.n	8003ff6 <_printf_i+0x15e>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	079b      	lsls	r3, r3, #30
 800409e:	d413      	bmi.n	80040c8 <_printf_i+0x230>
 80040a0:	68e0      	ldr	r0, [r4, #12]
 80040a2:	9b03      	ldr	r3, [sp, #12]
 80040a4:	4298      	cmp	r0, r3
 80040a6:	bfb8      	it	lt
 80040a8:	4618      	movlt	r0, r3
 80040aa:	e7a6      	b.n	8003ffa <_printf_i+0x162>
 80040ac:	2301      	movs	r3, #1
 80040ae:	4632      	mov	r2, r6
 80040b0:	4649      	mov	r1, r9
 80040b2:	4640      	mov	r0, r8
 80040b4:	47d0      	blx	sl
 80040b6:	3001      	adds	r0, #1
 80040b8:	d09d      	beq.n	8003ff6 <_printf_i+0x15e>
 80040ba:	3501      	adds	r5, #1
 80040bc:	68e3      	ldr	r3, [r4, #12]
 80040be:	9903      	ldr	r1, [sp, #12]
 80040c0:	1a5b      	subs	r3, r3, r1
 80040c2:	42ab      	cmp	r3, r5
 80040c4:	dcf2      	bgt.n	80040ac <_printf_i+0x214>
 80040c6:	e7eb      	b.n	80040a0 <_printf_i+0x208>
 80040c8:	2500      	movs	r5, #0
 80040ca:	f104 0619 	add.w	r6, r4, #25
 80040ce:	e7f5      	b.n	80040bc <_printf_i+0x224>
 80040d0:	08004417 	.word	0x08004417
 80040d4:	08004428 	.word	0x08004428

080040d8 <memmove>:
 80040d8:	4288      	cmp	r0, r1
 80040da:	b510      	push	{r4, lr}
 80040dc:	eb01 0402 	add.w	r4, r1, r2
 80040e0:	d902      	bls.n	80040e8 <memmove+0x10>
 80040e2:	4284      	cmp	r4, r0
 80040e4:	4623      	mov	r3, r4
 80040e6:	d807      	bhi.n	80040f8 <memmove+0x20>
 80040e8:	1e43      	subs	r3, r0, #1
 80040ea:	42a1      	cmp	r1, r4
 80040ec:	d008      	beq.n	8004100 <memmove+0x28>
 80040ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040f6:	e7f8      	b.n	80040ea <memmove+0x12>
 80040f8:	4601      	mov	r1, r0
 80040fa:	4402      	add	r2, r0
 80040fc:	428a      	cmp	r2, r1
 80040fe:	d100      	bne.n	8004102 <memmove+0x2a>
 8004100:	bd10      	pop	{r4, pc}
 8004102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800410a:	e7f7      	b.n	80040fc <memmove+0x24>

0800410c <_sbrk_r>:
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	2300      	movs	r3, #0
 8004110:	4d05      	ldr	r5, [pc, #20]	@ (8004128 <_sbrk_r+0x1c>)
 8004112:	4604      	mov	r4, r0
 8004114:	4608      	mov	r0, r1
 8004116:	602b      	str	r3, [r5, #0]
 8004118:	f7fc fe30 	bl	8000d7c <_sbrk>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d102      	bne.n	8004126 <_sbrk_r+0x1a>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	b103      	cbz	r3, 8004126 <_sbrk_r+0x1a>
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	bd38      	pop	{r3, r4, r5, pc}
 8004128:	200003cc 	.word	0x200003cc

0800412c <memchr>:
 800412c:	4603      	mov	r3, r0
 800412e:	b510      	push	{r4, lr}
 8004130:	b2c9      	uxtb	r1, r1
 8004132:	4402      	add	r2, r0
 8004134:	4293      	cmp	r3, r2
 8004136:	4618      	mov	r0, r3
 8004138:	d101      	bne.n	800413e <memchr+0x12>
 800413a:	2000      	movs	r0, #0
 800413c:	e003      	b.n	8004146 <memchr+0x1a>
 800413e:	7804      	ldrb	r4, [r0, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	428c      	cmp	r4, r1
 8004144:	d1f6      	bne.n	8004134 <memchr+0x8>
 8004146:	bd10      	pop	{r4, pc}

08004148 <_realloc_r>:
 8004148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414c:	4680      	mov	r8, r0
 800414e:	4615      	mov	r5, r2
 8004150:	460c      	mov	r4, r1
 8004152:	b921      	cbnz	r1, 800415e <_realloc_r+0x16>
 8004154:	4611      	mov	r1, r2
 8004156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800415a:	f7ff bc47 	b.w	80039ec <_malloc_r>
 800415e:	b92a      	cbnz	r2, 800416c <_realloc_r+0x24>
 8004160:	f7ff fbda 	bl	8003918 <_free_r>
 8004164:	2400      	movs	r4, #0
 8004166:	4620      	mov	r0, r4
 8004168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800416c:	f000 f81a 	bl	80041a4 <_malloc_usable_size_r>
 8004170:	4285      	cmp	r5, r0
 8004172:	4606      	mov	r6, r0
 8004174:	d802      	bhi.n	800417c <_realloc_r+0x34>
 8004176:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800417a:	d8f4      	bhi.n	8004166 <_realloc_r+0x1e>
 800417c:	4629      	mov	r1, r5
 800417e:	4640      	mov	r0, r8
 8004180:	f7ff fc34 	bl	80039ec <_malloc_r>
 8004184:	4607      	mov	r7, r0
 8004186:	2800      	cmp	r0, #0
 8004188:	d0ec      	beq.n	8004164 <_realloc_r+0x1c>
 800418a:	42b5      	cmp	r5, r6
 800418c:	462a      	mov	r2, r5
 800418e:	4621      	mov	r1, r4
 8004190:	bf28      	it	cs
 8004192:	4632      	movcs	r2, r6
 8004194:	f7ff fbb2 	bl	80038fc <memcpy>
 8004198:	4621      	mov	r1, r4
 800419a:	4640      	mov	r0, r8
 800419c:	f7ff fbbc 	bl	8003918 <_free_r>
 80041a0:	463c      	mov	r4, r7
 80041a2:	e7e0      	b.n	8004166 <_realloc_r+0x1e>

080041a4 <_malloc_usable_size_r>:
 80041a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a8:	1f18      	subs	r0, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bfbc      	itt	lt
 80041ae:	580b      	ldrlt	r3, [r1, r0]
 80041b0:	18c0      	addlt	r0, r0, r3
 80041b2:	4770      	bx	lr

080041b4 <_init>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr

080041c0 <_fini>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr
